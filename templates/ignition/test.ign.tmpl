---
variant: fcos
version: 1.0.0
systemd:
  units:
    - name: NetworkManager.service
      mask: true
    - name: NetworkManager-wait-online.service
      mask: true
    - name: systemd-networkd.service
      enabled: true
    - name: systemd-resolved.service
      enabled: true
    - name: systemd-networkd-wait-online.service
      mask: true
    - name: fstrim.service
      enabled: true
      dropins:
        - name: all.conf
          contents: |
            [Service]
            ExecStart=
            ExecStart=/usr/sbin/fstrim --all --verbose --quiet
    - name: containerd.service
      enabled: true
      dropins:
        - name: killmode.conf
          contents: |
            [Service]
            KillMode=mixed
    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubelet via Hyperkube
        After=network.target containerd.service
        Requires=containerd.service

        [Service]
        ExecStartPre=/bin/mkdir -p \
          ${kubelet_path} \
          /var/log/containers \
          /etc/cni/net.d
        ExecStart=/usr/bin/podman run --rm \
          --security-opt label=disable \
          --network host \
          --pid host \
          --privileged \
          -v /run:/run \
          -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
          -v /sys/fs/cgroup/systemd:/sys/fs/cgroup/systemd \
          -v /var/lib/containerd:/var/lib/containerd \
          -v ${kubelet_path}:${kubelet_path}:rshared,z \
          -v /var/log:/var/log \
          -v /var/run/lock:/var/run/lock:z \
          ${container_images.kubelet} \
          /usr/local/bin/kubelet \
            --config=/var/lib/kubelet/kubelet-config.yaml \
            --register-node=false \
            --exit-on-lock-contention \
            --lock-file=/var/run/lock/kubelet.lock \
            --container-runtime=remote \
            --container-runtime-endpoint=unix:///run/containerd/containerd.sock
        Restart=always
        RestartSec=10
        Delegate=yes

        [Install]
        WantedBy=multi-user.target

storage:
  files:
    - path: /etc/systemd/network/10-${host_network.store.if}.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=${host_network.store.if}

          [Network]
          LinkLocalAddressing=no
          DHCP=yes

          [DHCP]
          UseMTU=true
          UseDomains=true
    - path: /etc/systemd/network/10-${host_network.int.if}.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=${host_network.int.if}

          [Link]
          ARP=no

          [Network]
          LinkLocalAddressing=no
          DHCP=no
    - path: /etc/systemd/network/50-kube-proxy.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=kube*

          [Link]
          Unmanaged=true
    - path: /etc/systemd/network/50-veth.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=veth*

          [Link]
          Unmanaged=true

    - path: /etc/hostname
      mode: 0644
      contents:
        inline:
          ${hostname}
    - path: /etc/sysctl.d/ipforward.conf
      mode: 0644
      contents:
        inline: |
          net.ipv4.ip_forward=1
          net.ipv4.ip_nonlocal_bind=1
    - path: /etc/sysctl.d/max-user-watches.conf
      mode: 0644
      contents:
        inline: |
          fs.inotify.max_user_watches=16184
    - path: /etc/modules-load.d/iscsi.conf
      mode: 0644
      contents:
        inline: |
          iscsi_tcp

    - path: /etc/systemd/journal.conf.d/05-live.conf
      mode: 0644
      contents:
        inline: |
          [Journal]
          Storage=volatile
          RuntimeMaxUse=15M
          ForwardToSyslog=no
          ForwardToConsole=no
    - path: /etc/systemd/resolved.conf.d/05-disable-stub.conf
      mode: 0644
      contents:
        inline: |
          [Resolve]
          FallbackDNS=
          DNSStubListener=no
    - path: /etc/systemd/system.conf.d/05-live.conf
      mode: 0644
      contents:
        inline: |
          [Manager]
          DumpCore=no

    - path: /etc/containerd/config.toml
      mode: 0644
      overwrite: true
      contents:
        inline: |-
          root = "/var/lib/containerd"
          state = "/run/containerd"
          oom_score = -999
          [plugins]
            version = 2
            [plugins."io.containerd.grpc.v1.cri"]
              disable_tcp_service = true
              stream_server_address = "127.0.0.1"
              stream_server_port = "0"
              [plugins."io.containerd.grpc.v1.cri".containerd]
                snapshotter = "overlayfs"
                default_runtime_name = "runc"
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                  runtime_type = "io.containerd.runc.v2"
                  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                    NoPivotRoot = true
                    SystemdCgroup = true

    - path: ${kubelet_path}/kubelet-config.yaml
      mode: 0644
      contents:
        inline: |-
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            anonymous:
              enabled: true
            webhook:
              enabled: false
          authorization:
            mode: AlwaysAllow
          staticPodPath: ${kubelet_path}/manifests
          makeIPTablesUtilChains: false
          cgroupDriver: systemd

    ##
    ## pod config
    ##

    - path: ${pod_mount_path}/coredns/Corefile
      mode: 0644
      contents:
        inline: |-
          ${domains.internal}:53 {
            errors
            forward . ${services.internal_dns.vip}
          }
          ${domains.kubernetes_cluster}:53 {
            errors
            forward . ${services.internal_dns.vip}
          }
          .:53 {
            errors
            health
            forward . tls://${dns_forward_ip} {
              tls_servername ${dns_forward_tls_servername}
              health_check 5s
            }
            prometheus :${services.recursive_dns.ports.prometheus}
            cache 30
            reload
            loadbalance
          }

    ##
    ## pod manifests
    ##

    - path: ${kubelet_path}/manifests/coredns.yaml
      mode: 0644
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            namespace: kube-system
            name: coredns
          spec:
            restartPolicy: Always
            hostNetwork: true
            dnsPolicy: Default
            containers:
            - name: coredns
              image: "${container_images.coredns}"
              resources:
                limits:
                  memory: 170Mi
                requests:
                  cpu: 100m
                  memory: 70Mi
              args: [ "-conf", "/etc/coredns/Corefile" ]
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 15
                timeoutSeconds: 5
                successThreshold: 1
                failureThreshold: 5
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  add:
                  - NET_BIND_SERVICE
                  drop:
                  - all
                readOnlyRootFilesystem: true
              volumeMounts:
              - name: config-volume
                mountPath: /etc/coredns/Corefile
                readOnly: true
            volumes:
            - name: config-volume
              hostPath:
                path: ${pod_mount_path}/coredns/Corefile

passwd:
  users:
    - name: ${user}
      groups:
        - adm
        - sudo
        - systemd-journal
        - wheel
      ssh_authorized_keys:
        - ${ssh_authorized_key}
