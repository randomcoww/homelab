---
networkd:
  units:
    - name: ${host_network.store.if}.network
      contents: |
        [Match]
        Name=${host_network.store.if}

        [Network]
        LinkLocalAddressing=no
        DHCP=no
        Gateway=${networks.store.router}
        DNS=${services.recursive_dns.vip}

        [Link]
        MTUBytes=${mtu}

        [Address]
        Address=${host_network.store.ip}/${networks.store.cidr}

    - name: ${host_network.int.if}.network
      contents: |
        [Match]
        Name=${host_network.int.if}

        [Link]
        ARP=no

        [Network]
        LinkLocalAddressing=no
        DHCP=no

systemd:
  units:
    - name: docker.service
      mask: true
    - name: docker.socket
      mask: true
    - name: containerd.service
      enabled: true
      dropins:
        - name: containerd.conf
          contents: |
            [Service]
            LimitNOFILE=infinity
            ExecStart=
            ExecStart=/usr/bin/env PATH=$${TORCX_BINDIR}:$${PATH} $${TORCX_BINDIR}/containerd
            RestartSec=5
    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubelet via Hyperkube ACI
        After=network.target

        [Service]
        ExecStartPre=/bin/mkdir -p \
          ${kubelet_path} \
          /var/log/containers \
          /etc/cni/net.d
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid
        ExecStart=/usr/bin/rkt run \
          --uuid-file-save=/var/cache/kubelet-pod.uuid \
          --volume var-lib-containerd,kind=host,source=/var/lib/containerd,readOnly=false \
          --mount volume=var-lib-containerd,target=/var/lib/containerd \
          --insecure-options=image \
          --volume coreos-var-lib-kubelet,kind=host,source=${kubelet_path},readOnly=false,recursive=true \
          --volume coreos-var-log,kind=host,source=/var/log,readOnly=false \
          --volume coreos-run,kind=host,source=/run,readOnly=false \
          --mount volume=coreos-var-lib-kubelet,target=${kubelet_path} \
          --mount volume=coreos-var-log,target=/var/log \
          --mount volume=coreos-run,target=/run \
          --dns host \
          --hosts-entry host \
          --stage1-from-dir=stage1-fly.aci \
          docker://${container_images.kubelet} \
            --exec=/usr/local/bin/kubelet -- \
            --config=${kubelet_path}/kubelet-config.yaml \
            --node-ip=${host_network.store.ip} \
            --register-node=false \
            --container-runtime=remote \
            --container-runtime-endpoint=unix:///run/containerd/containerd.sock
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid
        Restart=always
        RestartSec=5

        [Install]
        WantedBy=multi-user.target

storage:
  files:
    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline:
          ${hostname}
    - path: /etc/sysctl.d/ipforward.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          net.ipv4.ip_forward=1
          net.ipv4.ip_nonlocal_bind=1
    - path: /etc/sysctl.d/max-user-watches.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          fs.inotify.max_user_watches=16184

    - path: /etc/containerd/config.toml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          version = 2
          oom_score = -999
          [plugins]
            [plugins."io.containerd.grpc.v1.cri"]
              [plugins."io.containerd.grpc.v1.cri".containerd]
                snapshotter = "overlayfs"
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
                  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                    # runtime_type should be normally be "io.containerd.runc.v*"
                    # containerd-shim-runc-v* binaries are needed but not provided in the flatcar image
                    runtime_type = "io.containerd.runtime.v1.linux"
            [plugins."io.containerd.runtime.v1.linux"]
              no_pivot = true

    - path: ${kubelet_path}/kubelet-config.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            anonymous:
              enabled: true
            webhook:
              enabled: false
          authorization:
            mode: AlwaysAllow
          staticPodPath: ${kubelet_path}/manifests
          makeIPTablesUtilChains: false

    - path: ${kubelet_path}/manifests/coredns.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            namespace: kube-system
            name: coredns
          spec:
            restartPolicy: Always
            hostNetwork: true
            dnsPolicy: Default
            containers:
            - name: coredns
              image: "${container_images.coredns}"
              resources:
                limits:
                  memory: 170Mi
                requests:
                  cpu: 100m
                  memory: 70Mi
              args: [ "-conf", "/etc/coredns/Corefile" ]
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 60
                timeoutSeconds: 5
                successThreshold: 1
                failureThreshold: 5
              readinessProbe:
                httpGet:
                  path: /health
                  port: 8080
                  scheme: HTTP
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  add:
                  - NET_BIND_SERVICE
                  drop:
                  - all
                readOnlyRootFilesystem: true
              volumeMounts:
              - name: config-volume
                mountPath: /etc/coredns/Corefile
                readOnly: true
            volumes:
            - name: config-volume
              hostPath:
                path: ${pod_mount_path}/coredns/Corefile

passwd:
  users:
  - name: ${user}
    ssh_authorized_keys:
      - ${ssh_authorized_key}
