---
variant: fcos
version: 1.0.0
systemd:
  units:
    - name: libvirtd.service
      enabled: true
    - name: ksm.service
      enabled: true
    - name: ksmtuned.service
      enabled: true
    - name: kea-dhcp4.service
      enabled: true
      dropins:
        - name: internal.conf
          contents: |
            [Service]
            ExecStart=
            ExecStart=/usr/sbin/kea-dhcp4 -c /etc/kea/kea-dhcp4-internal.conf
    - name: matchbox.service
      enabled: true
      contents: |
        [Unit]
        After=network-online.target
        Wants=network-online.target

        [Service]
        TimeoutStartSec=5m
        Restart=always
        RestartSec=10
        ExecStartPre=/usr/bin/mkdir -p \
          ${matchbox_data_path} ${matchbox_assets_path} ${matchbox_tls_path}
        # Host initially has no internet access - use image archive
        ExecStartPre=-/usr/bin/podman load -i \
          ${image_preload_path}/matchbox.tar
        ExecStart=/usr/bin/podman run --rm \
          --security-opt label=disable \
          --network host \
          -v ${matchbox_tls_path}:${matchbox_tls_path}:ro \
          -v ${matchbox_data_path}:${matchbox_data_path} \
          -v ${matchbox_assets_path}:${matchbox_assets_path} \
          ${container_images.matchbox} \
            -address=${services.renderer.vip}:${services.renderer.ports.http} \
            -rpc-address=0.0.0.0:${services.renderer.ports.rpc} \
            -ca-file=${matchbox_tls_path}/matchbox-ca.pem \
            -cert-file=${matchbox_tls_path}/matchbox.pem \
            -key-file=${matchbox_tls_path}/matchbox-key.pem \
            -data-path=${matchbox_data_path} \
            -assets-path=${matchbox_assets_path}

        [Install]
        WantedBy=multi-user.target

storage:
  files:
    - path: /etc/systemd/network/90-default.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=en*

          [Link]
          ARP=no

          [Network]
          LinkLocalAddressing=no
          DHCP=no

    %{~ for k in keys(internal_networks) ~}
    ##
    ## internal network ${k} for host <-> local vm
    ##
    - path: /etc/systemd/network/10-${internal_networks[k].if}.netdev
      mode: 0644
      contents:
        inline: |
          [NetDev]
          Name=${internal_networks[k].if}
          Kind=bridge

    - path: /etc/systemd/network/10-${internal_networks[k].if}.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=${internal_networks[k].if}

          [Link]
          ARP=no

          [Network]
          LinkLocalAddressing=no
          DHCP=no
          MACVTAP=${k}-tap
          Bridge=${k}-dummy

    - path: /etc/systemd/network/10-${k}-dummy.netdev
      mode: 0644
      contents:
        inline: |
          [NetDev]
          Name=${k}-dummy
          Kind=dummy

    - path: /etc/systemd/network/10-${k}-dummy.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=${k}-dummy

          [Link]
          ARP=no

          [Network]
          LinkLocalAddressing=no
          DHCP=no
          Bridge=${internal_networks[k].if}

    - path: /etc/systemd/network/10-${k}-tap.netdev
      mode: 0644
      contents:
        inline: |
          [NetDev]
          Name=${k}-tap
          Kind=macvtap

          [MACVTAP]
          Mode=bridge

    - path: /etc/systemd/network/10-${k}-tap.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=${k}-tap

          [Network]
          LinkLocalAddressing=no
          DHCP=no

          [Address]
          Address=${internal_networks[k].ip}/${networks[k].cidr}
    %{~ endfor ~}

    - path: /etc/kea/kea-dhcp4-internal.conf
      mode: 0644
      contents:
        inline: |
          {
            "Dhcp4": {
              "lease-database": {
                "type": "memfile",
                "persist": true,
                "name": "${kea_path}/kea-leases4.csv"
              },
              "interfaces-config": {
                "interfaces": ${jsonencode([
                  for k in keys(internal_networks):
                  "${k}-tap"
                  if lookup(networks[k], "dhcp_pool", null) != null
                ])}
              },
              "client-classes": [
                {
                  "name": "ipxe_detected",
                  "test": "substring(option[77].hex,0,4) == 'iPXE'",
                  "boot-file-name": "http://${services.renderer.vip}:${services.renderer.ports.http}/boot.ipxe"
                }
              ],
              "subnet4": ${jsonencode([
                for k in keys(internal_networks):
                {
                  subnet = "${networks[k].network}/${networks[k].cidr}",
                  pools = [
                    {
                      pool = "${networks[k].dhcp_pool}"
                    }
                  ]
                }
                if lookup(networks[k], "dhcp_pool", null) != null
              ])}
            }
          }

    ##
    ## certs
    ##
    - path: ${matchbox_tls_path}/matchbox-ca.pem
      mode: 0644
      contents:
        inline: "${tls_matchbox_ca}"
    - path: ${matchbox_tls_path}/matchbox.pem
      mode: 0644
      contents:
        inline: "${tls_matchbox}"
    - path: ${matchbox_tls_path}/matchbox-key.pem
      mode: 0644
      contents:
        inline: "${tls_matchbox_key}"

passwd:
  users:
    - name: ${user}
      groups:
        - libvirt