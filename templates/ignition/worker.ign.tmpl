---
variant: fcos
version: 1.0.0
systemd:
  units:
    - name: kubelet.service
      enabled: true
      dropins:
        - name: 10-worker.conf
          contents: |
            [Unit]
            After=iscsid.service
            Wants=iscsid.service

            [Service]
            ExecStart=
            ExecStart=/usr/bin/podman run --rm -it \
              $KUBELET_PODMAN_OPTS \
              ${container_images.hyperkube} \
                kubelet \
                  --config=${kubelet_path}/kubelet-config-worker.yaml \
                  --exit-on-lock-contention \
                  --lock-file=/var/run/lock/kubelet.lock \
                  --kubeconfig=${kubelet_path}/kubelet.kubeconfig \
                  --bootstrap-kubeconfig=${kubelet_path}/bootstrap.kubeconfig \
                  --network-plugin=cni \
                  --cert-dir=${kubelet_path} \
                  --volume-plugin-dir=${kubelet_path}/volumeplugins \
                  --container-runtime=remote \
                  --container-runtime-endpoint=unix:///var/run/dockershim.sock
    - name: iscsid.socket
      mask: true
    - name: iscsid.service
      enabled: true
      contents: |
        [Unit]
        After=network.target

        [Service]
        ExecStartPre=-/usr/bin/podman kill iscsid
        ExecStartPre=-/usr/bin/podman rm iscsid
        ExecStart=/usr/bin/podman run --rm -it \
          --name iscsid \
          --security-opt label=disable \
          --network host \
          --ipc host \
          --pid host \
          --privileged \
          -v /dev:/dev \
          -v /usr/lib/modules:/lib/modules:ro \
          ${container_images.hyperkube} \
            iscsid -fn
        Restart=always

        [Install]
        WantedBy=multi-user.target

storage:
  files:
    - path: /etc/modules-load.d/custom.conf
      mode: 0644
      contents:
        inline: |
          # openebs mount
          iscsi_tcp
          # kube-dns reply from unexpected source
          br_netfilter
    - path: ${kubelet_path}/kubelet-config-worker.yaml
      mode: 0644
      contents:
        inline: |-
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: true
            x509:
              clientCAFile: "${kubelet_path}/kubernetes-ca.pem"
          authorization:
            mode: Webhook
          clusterDomain: "${domains.kubernetes_cluster}"
          clusterDNS:
            - "${services.kubernetes_dns.vip}"
          runtimeRequestTimeout: "15m"
          rotateCertificates: true
          serverTLSBootstrap: true
    - path: ${kubelet_path}/bootstrap.kubeconfig
      mode: 0644
      contents:
        inline: |-
          apiVersion: v1
          clusters:
          - cluster:
              certificate-authority: ${kubelet_path}/kubernetes-ca.pem
              server: ${apiserver_endpoint}
            name: ${cluster_name}
          contexts:
          - context:
              cluster: ${cluster_name}
              user: kubelet-bootstrap
            name: default
          current-context: default
          kind: Config
          preferences: {}
          users:
          - name: kubelet-bootstrap
            user:
              client-certificate: ${kubelet_path}/bootstrap.pem
              client-key: ${kubelet_path}/bootstrap-key.pem

    ##
    ## certs
    ##

    - path: ${kubelet_path}/kubernetes-ca.pem
      mode: 0644
      contents:
        inline: "${tls_kubernetes_ca}"
    - path: ${kubelet_path}/bootstrap.pem
      mode: 0644
      contents:
        inline: "${tls_bootstrap}"
    - path: ${kubelet_path}/bootstrap-key.pem
      mode: 0644
      contents:
        inline: "${tls_bootstrap_key}"