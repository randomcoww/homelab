---
variant: fcos
version: 1.0.0
systemd:
  units:
    - name: kubelet.service
      enabled: true
      dropins:
        - name: 10-worker.conf
          contents: |
            [Service]
            ExecStart=
            ExecStart=/usr/bin/podman run --rm \
              --security-opt label=disable \
              --network host \
              --pid host \
              --privileged \
              -v /run:/run \
              -v /dev:/dev \
              -v /etc/ssl/certs:/etc/ssl/certs:ro \
              -v /etc/pki/ca-trust:/etc/pki/ca-trust:ro \
              -v /usr/lib/modules:/lib/modules:ro \
              -v /etc/machine-id:/etc/machine-id:ro \
              -v /usr/lib/os-release:/etc/os-release \
              -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
              -v /sys/fs/cgroup/systemd:/sys/fs/cgroup/systemd \
              -v /var/lib/containerd:/var/lib/containerd \
              -v /opt/cni/bin:/opt/cni/bin:z \
              -v ${kubelet_path}:${kubelet_path}:rshared,z \
              -v /var/log:/var/log \
              -v /var/run/lock:/var/run/lock:z \
              ${container_images.hyperkube} \
                kubelet \
                  --config=${kubelet_path}/kubelet-config-worker.yaml \
                  --exit-on-lock-contention \
                  --lock-file=/var/run/lock/kubelet.lock \
                  --kubeconfig=${kubelet_path}/kubelet.kubeconfig \
                  --bootstrap-kubeconfig=${kubelet_path}/bootstrap.kubeconfig \
                  --network-plugin=cni \
                  --cert-dir=${kubelet_path} \
                  --volume-plugin-dir=${kubelet_path}/volumeplugins \
                  --container-runtime=remote \
                  --container-runtime-endpoint=unix:///run/containerd/containerd.sock

storage:
  files:
    - path: /etc/hostname
      mode: 0644
      contents:
        inline:
          ${hostname}
    - path: /etc/systemd/network/10-${host_network.main.if}.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=${host_network.main.if}

          [DHCP]
          UseMTU=yes

          [Network]
          LinkLocalAddressing=no
          DHCP=yes
          MulticastDNS=yes
    - path: /etc/systemd/network/10-${host_network.int.if}.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=${host_network.int.if}

          [Link]
          ARP=no
          RequiredForOnline=no

          [Network]
          LinkLocalAddressing=no
          DHCP=no
    - path: /etc/systemd/network/50-kube-proxy.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=kube*

          [Link]
          Unmanaged=true
          RequiredForOnline=no

    - path: /etc/systemd/network/50-veth.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=veth*

          [Link]
          Unmanaged=true
          RequiredForOnline=no

    - path: ${kubelet_path}/kubelet-config-worker.yaml
      mode: 0644
      contents:
        inline: |-
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: true
            x509:
              clientCAFile: "${kubelet_path}/kubernetes-ca.pem"
          authorization:
            mode: Webhook
          clusterDomain: "${domains.kubernetes_cluster}"
          clusterDNS:
            - "${services.kubernetes_dns.vip}"
          runtimeRequestTimeout: "15m"
          rotateCertificates: true
          serverTLSBootstrap: true
    - path: ${kubelet_path}/bootstrap.kubeconfig
      mode: 0644
      contents:
        inline: |-
          apiVersion: v1
          clusters:
          - cluster:
              certificate-authority: ${kubelet_path}/kubernetes-ca.pem
              server: ${apiserver_endpoint}
            name: ${cluster_name}
          contexts:
          - context:
              cluster: ${cluster_name}
              user: kubelet-bootstrap
            name: default
          current-context: default
          kind: Config
          preferences: {}
          users:
          - name: kubelet-bootstrap
            user:
              client-certificate: ${kubelet_path}/bootstrap.pem
              client-key: ${kubelet_path}/bootstrap-key.pem

    ##
    ## certs
    ##

    - path: ${kubelet_path}/kubernetes-ca.pem
      mode: 0644
      contents:
        inline: "${tls_kubernetes_ca}"
    - path: ${kubelet_path}/bootstrap.pem
      mode: 0644
      contents:
        inline: "${tls_bootstrap}"
    - path: ${kubelet_path}/bootstrap-key.pem
      mode: 0644
      contents:
        inline: "${tls_bootstrap_key}"