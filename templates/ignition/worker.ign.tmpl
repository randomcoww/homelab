---
networkd:
  units:
    - name: ${host_network.store.if}.network
      contents: |
        [Match]
        Name=${host_network.store.if}

        [Network]
        LinkLocalAddressing=no
        DHCP=yes

        [DHCP]
        UseMTU=yes

    - name: ${host_network.int.if}.network
      contents: |
        [Match]
        Name=${host_network.int.if}

        [Link]
        ARP=no

        [Network]
        LinkLocalAddressing=no
        DHCP=no

systemd:
  units:
    %{~ for disk in host_disks ~}
    - name: ${join("-", compact(split("/", disk.mount_path)))}.mount
      enable: true
      contents: |
        [Unit]
        Before=local-fs.target
        [Mount]
        What=${disk.device}
        Where=${disk.mount_path}
        Type=${disk.format}
        [Install]
        WantedBy=local-fs.target
    %{~ endfor ~}

    - name: iscsid.service
      enable: true
    - name: docker.service
      mask: true
    - name: docker.socket
      mask: true
    - name: containerd.service
      enabled: true
      dropins:
        - name: containerd.conf
          contents: |
            [Service]
            LimitNOFILE=infinity
            ExecStart=
            ExecStart=/usr/bin/env PATH=$${TORCX_BINDIR}:$${PATH} $${TORCX_BINDIR}/containerd
            RestartSec=5
    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubelet via Hyperkube ACI
        After=network.target

        [Service]
        Environment="KUBELET_IMAGE=docker://${container_images.hyperkube}"
        Environment="RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \
          --volume=resolv,kind=host,source=/etc/resolv.conf \
          --volume var-lib-containerd,kind=host,source=/pv/containerd,readOnly=false \
          --volume iscsiadm,kind=host,source=/usr/sbin/iscsiadm \
          --mount volume=resolv,target=/etc/resolv.conf \
          --mount volume=var-lib-containerd,target=/pv/containerd \
          --mount volume=iscsiadm,target=/usr/sbin/iscsiadm \
          --insecure-options=image"
        Environment="KUBELET_IMAGE_ARGS=--exec=/usr/local/bin/kubelet"
        ExecStartPre=/bin/mkdir -p \
          /var/log/containers \
          /etc/cni/net.d
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --config=${kubelet_path}/kubelet-config.yaml \
          --kubeconfig=${kubelet_path}/kubelet.kubeconfig \
          --bootstrap-kubeconfig=${kubelet_path}/bootstrap.kubeconfig \
          --network-plugin=cni \
          --cert-dir=${kubelet_path} \
          --volume-plugin-dir=${kubelet_path}/volumeplugins \
          --container-runtime=remote \
          --container-runtime-endpoint=unix:///run/containerd/containerd.sock
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid
        Restart=always
        RestartSec=5

        [Install]
        WantedBy=multi-user.target

storage:
  filesystems:
    %{~ for disk in host_disks ~}
    - name: ${disk.label}
      mount:
        device: ${disk.device}
        format: ${disk.format}
        wipe_filesystem: false
        label: ${upper(disk.label)}
    %{~ endfor ~}

  files:
    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline:
          ${hostname}
    - path: /etc/sysctl.d/max-user-watches.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          fs.inotify.max_user_watches=16184

    - path: /etc/containerd/config.toml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          version = 2
          root = "/pv/containerd"
          oom_score = -999
          [plugins]
            [plugins."io.containerd.grpc.v1.cri"]
              stream_server_address = "0.0.0.0"
              [plugins."io.containerd.grpc.v1.cri".containerd]
                snapshotter = "overlayfs"
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
                  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                    # runtime_type should be normally be "io.containerd.runc.v*"
                    # containerd-shim-runc-v* binaries are needed but not provided in the flatcar image
                    runtime_type = "io.containerd.runtime.v1.linux"
            [plugins."io.containerd.runtime.v1.linux"]
              no_pivot = true

    - path: ${kubelet_path}/kubelet-config.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: true
            x509:
              clientCAFile: "${kubelet_path}/kubernetes-ca.pem"
          authorization:
            mode: Webhook
          clusterDomain: "${domains.kubernetes_cluster}"
          clusterDNS:
            - "${services.kubernetes_dns.vip}"
          runtimeRequestTimeout: "15m"
          rotateCertificates: true
          serverTLSBootstrap: true

    - path: ${kubelet_path}/bootstrap.kubeconfig
      filesystem: root
      mode: 420
      contents:
        inline: |-
          apiVersion: v1
          clusters:
          - cluster:
              certificate-authority: ${kubelet_path}/kubernetes-ca.pem
              server: ${apiserver_endpoint}
            name: ${cluster_name}
          contexts:
          - context:
              cluster: ${cluster_name}
              user: system:node:bootstrap
            name: default
          current-context: default
          kind: Config
          preferences: {}
          users:
          - name: system:node:bootstrap
            user:
              client-certificate: ${kubelet_path}/bootstrap.pem
              client-key: ${kubelet_path}/bootstrap-key.pem

    ##
    ## certs
    ##

    - path: ${kubelet_path}/kubernetes-ca.pem
      filesystem: root
      mode: 420
      contents:
        inline: "${tls_kubernetes_ca}"
    - path: ${kubelet_path}/bootstrap.pem
      filesystem: root
      mode: 420
      contents:
        inline: "${tls_bootstrap}"
    - path: ${kubelet_path}/bootstrap-key.pem
      filesystem: root
      mode: 420
      contents:
        inline: "${tls_bootstrap_key}"

passwd:
  users:
  - name: ${user}
    ssh_authorized_keys:
      - ${ssh_authorized_key}
