---
variant: fcos
version: 1.0.0
systemd:
  units:
    %{~ for disk in host_disks ~}
    %{~ if lookup(disk, "label", null) != null ~}
    %{~ if lookup(disk, "mount_path", null) != null ~}
    - name: ${join("-", compact(split("/", disk.mount_path)))}.mount
      enabled: true
      contents: |
        [Unit]
        Before=local-fs.target
        [Mount]
        What=${disk.device}
        Where=${disk.mount_path}
        Type=${lookup(disk, "format", "xfs")}
        [Install]
        WantedBy=local-fs.target
    %{~ endif ~}
    %{~ endif ~}
    %{~ endfor ~}

    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubelet via Hyperkube
        After=network.target containerd.service
        Requires=containerd.service

        [Service]
        ExecStartPre=/bin/mkdir -p \
          ${kubelet_path} \
          /var/log/containers \
          /etc/cni/net.d
        ExecStart=/usr/bin/podman run --rm \
          --security-opt label=disable \
          --network host \
          --pid host \
          --privileged \
          -v /run:/run \
          -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
          -v /sys/fs/cgroup/systemd:/sys/fs/cgroup/systemd \
          -v /var/lib/containerd:/var/lib/containerd \
          -v ${kubelet_path}:${kubelet_path}:rshared,z \
          -v /var/log:/var/log \
          -v /var/run/lock:/var/run/lock:z \
          ${container_images.kubelet} \
          /usr/local/bin/kubelet \
            --exit-on-lock-contention \
            --lock-file=/var/run/lock/kubelet.lock \
            --config=${kubelet_path}/kubelet-config.yaml \
            --kubeconfig=${kubelet_path}/kubelet.kubeconfig \
            --bootstrap-kubeconfig=${kubelet_path}/bootstrap.kubeconfig \
            --network-plugin=cni \
            --cert-dir=${kubelet_path} \
            --volume-plugin-dir=${kubelet_path}/volumeplugins \
            --container-runtime=remote \
            --container-runtime-endpoint=unix:///run/containerd/containerd.sock
        Restart=always
        RestartSec=10
        Delegate=yes

        [Install]
        WantedBy=multi-user.target

storage:
  filesystems:
    %{~ for disk in host_disks ~}
    %{~ if lookup(disk, "label", null) != null ~}
    - path: ${disk.mount_path}
      device: ${disk.device}
      format: ${lookup(disk, "format", "xfs")}
      wipe_filesystem: ${lookup(disk, "wipe_filesystem", false)}
      label: ${upper(disk.label)}
    %{~ endif ~}
    %{~ endfor ~}

  files:
    - path: /etc/systemd/network/10-${host_network.store.if}.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=${host_network.store.if}

          [Network]
          LinkLocalAddressing=no
          DHCP=no
          Gateway=${networks.store.router}
          DNS=${services.recursive_dns.vip}

          [Link]
          MTUBytes=${mtu}

          [Address]
          Address=${host_network.store.ip}/${networks.store.cidr}
    - path: /etc/systemd/network/10-${host_network.int.if}.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=${host_network.int.if}

          [Link]
          ARP=no

          [Network]
          LinkLocalAddressing=no
          DHCP=no
    - path: /etc/systemd/network/50-kube-proxy.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=kube*

          [Link]
          Unmanaged=true
    - path: /etc/systemd/network/50-veth.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=veth*

          [Link]
          Unmanaged=true

    - path: ${kubelet_path}/kubelet-config.yaml
      mode: 0644
      contents:
        inline: |-
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: true
            x509:
              clientCAFile: "${kubelet_path}/kubernetes-ca.pem"
          authorization:
            mode: Webhook
          clusterDomain: "${domains.kubernetes_cluster}"
          clusterDNS:
            - "${services.kubernetes_dns.vip}"
          runtimeRequestTimeout: "15m"
          rotateCertificates: true
          serverTLSBootstrap: true

    - path: ${kubelet_path}/bootstrap.kubeconfig
      mode: 0644
      contents:
        inline: |-
          apiVersion: v1
          clusters:
          - cluster:
              certificate-authority: ${kubelet_path}/kubernetes-ca.pem
              server: ${apiserver_endpoint}
            name: ${cluster_name}
          contexts:
          - context:
              cluster: ${cluster_name}
              user: system:node:bootstrap
            name: default
          current-context: default
          kind: Config
          preferences: {}
          users:
          - name: system:node:bootstrap
            user:
              client-certificate: ${kubelet_path}/bootstrap.pem
              client-key: ${kubelet_path}/bootstrap-key.pem

    ##
    ## certs
    ##

    - path: ${kubelet_path}/kubernetes-ca.pem
      mode: 0644
      contents:
        inline: "${tls_kubernetes_ca}"
    - path: ${kubelet_path}/bootstrap.pem
      mode: 0644
      contents:
        inline: "${tls_bootstrap}"
    - path: ${kubelet_path}/bootstrap-key.pem
      mode: 0644
      contents:
        inline: "${tls_bootstrap_key}"