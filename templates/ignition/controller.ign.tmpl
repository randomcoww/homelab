---
networkd:
  units:
    - name: 00-${host_network.store.if}.network
      contents: |
        [Match]
        Name=${host_network.store.if}

        [Network]
        LinkLocalAddressing=no
        DHCP=no
        Gateway=${networks.store.router}
        DNS=${services.recursive_dns.vip}

        [Link]
        MTUBytes=${mtu}

        [Address]
        Address=${host_network.store.ip}/${networks.store.cidr}
    - name: 00-${host_network.int.if}.network
      contents: |
        [Match]
        Name=${host_network.int.if}

        [Link]
        ARP=no

        [Network]
        LinkLocalAddressing=no
        DHCP=no

systemd:
  units:
    - name: ntpd.service
      enabled: true
    - name: docker.service
      mask: true
    - name: docker.socket
      mask: true
    - name: containerd.service
      enabled: true
      dropins:
        - name: containerd.conf
          contents: |
            [Service]
            LimitNOFILE=infinity
            ExecStart=
            ExecStart=/usr/bin/env PATH=$${TORCX_BINDIR}:$${PATH} $${TORCX_BINDIR}/containerd
            RestartSec=5
    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubelet via Hyperkube ACI
        After=network.target

        [Service]
        ExecStartPre=/bin/mkdir -p \
          ${kubelet_path} \
          /var/log/containers \
          /etc/cni/net.d
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid
        ExecStart=/usr/bin/rkt run \
          --uuid-file-save=/var/cache/kubelet-pod.uuid \
          --volume var-lib-containerd,kind=host,source=/var/lib/containerd,readOnly=false \
          --mount volume=var-lib-containerd,target=/var/lib/containerd \
          --insecure-options=image \
          --volume coreos-var-lib-kubelet,kind=host,source=${kubelet_path},readOnly=false,recursive=true \
          --volume coreos-var-log,kind=host,source=/var/log,readOnly=false \
          --volume coreos-run,kind=host,source=/run,readOnly=false \
          --mount volume=coreos-var-lib-kubelet,target=${kubelet_path} \
          --mount volume=coreos-var-log,target=/var/log \
          --mount volume=coreos-run,target=/run \
          --dns host \
          --hosts-entry host \
          --stage1-from-dir=stage1-fly.aci \
          docker://${container_images.kubelet} \
            --exec=/usr/local/bin/kubelet -- \
            --config=${kubelet_path}/kubelet-config.yaml \
            --node-ip=${host_network.store.ip} \
            --register-node=false \
            --container-runtime=remote \
            --container-runtime-endpoint=unix:///run/containerd/containerd.sock
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid
        Restart=always
        RestartSec=5

        [Install]
        WantedBy=multi-user.target

storage:
  files:
    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline:
          ${hostname}
    - path: /etc/sysctl.d/ipforward.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          net.ipv4.ip_forward=1
          net.ipv4.ip_nonlocal_bind=1
    - path: /etc/sysctl.d/max-user-watches.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          fs.inotify.max_user_watches=16184

    - path: /etc/containerd/config.toml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          version = 2
          root = "/var/lib/containerd"
          oom_score = -999
          [plugins]
            [plugins."io.containerd.grpc.v1.cri"]
              [plugins."io.containerd.grpc.v1.cri".containerd]
                snapshotter = "overlayfs"
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
                  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                    # runtime_type should be normally be "io.containerd.runc.v*"
                    # containerd-shim-runc-v* binaries are needed but not provided in the flatcar image
                    runtime_type = "io.containerd.runtime.v1.linux"
            [plugins."io.containerd.runtime.v1.linux"]
              no_pivot = true

    - path: ${kubelet_path}/kubelet-config.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            anonymous:
              enabled: true
            webhook:
              enabled: false
          authorization:
            mode: AlwaysAllow
          staticPodPath: ${kubelet_path}/manifests
          makeIPTablesUtilChains: false

    ##
    ## certs
    ##

    - path: ${controller_mount_path}/kubernetes-ca.pem
      filesystem: root
      mode: 420
      contents:
        inline: "${tls_kubernetes_ca}"
    - path: ${controller_mount_path}/kubernetes-ca-key.pem
      filesystem: root
      mode: 420
      contents:
        inline: "${tls_kubernetes_ca_key}"
    - path: ${controller_mount_path}/kubernetes.pem
      filesystem: root
      mode: 420
      contents:
        inline: "${tls_kubernetes}"
    - path: ${controller_mount_path}/kubernetes-key.pem
      filesystem: root
      mode: 420
      contents:
        inline: "${tls_kubernetes_key}"

    - path: ${controller_mount_path}/etcd-ca.pem
      filesystem: root
      mode: 420
      contents:
        inline: "${tls_etcd_ca}"
    - path: ${controller_mount_path}/etcd.pem
      filesystem: root
      mode: 420
      contents:
        inline: "${tls_etcd}"
    - path: ${controller_mount_path}/etcd-key.pem
      filesystem: root
      mode: 420
      contents:
        inline: "${tls_etcd_key}"
    - path: ${controller_mount_path}/etcd-client.pem
      filesystem: root
      mode: 420
      contents:
        inline: "${tls_etcd_client}"
    - path: ${controller_mount_path}/etcd-client-key.pem
      filesystem: root
      mode: 420
      contents:
        inline: "${tls_etcd_client_key}"

    - path: ${controller_mount_path}/kube-controller-manager.pem
      filesystem: root
      mode: 420
      contents:
        inline: "${tls_controller_manager}"
    - path: ${controller_mount_path}/kube-controller-manager-key.pem
      filesystem: root
      mode: 420
      contents:
        inline: "${tls_controller_manager_key}"
    - path: ${controller_mount_path}/kube-scheduler.pem
      filesystem: root
      mode: 420
      contents:
        inline: "${tls_scheduler}"
    - path: ${controller_mount_path}/kube-scheduler-key.pem
      filesystem: root
      mode: 420
      contents:
        inline: "${tls_scheduler_key}"

    - path: ${controller_mount_path}/service-account.pem
      filesystem: root
      mode: 420
      contents:
        inline: "${tls_service_account}"
    - path: ${controller_mount_path}/service-account-key.pem
      filesystem: root
      mode: 420
      contents:
        inline: "${tls_service_account_key}"

    ##
    ## pod config
    ##

    - path: ${controller_mount_path}/kube-scheduler.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          apiVersion: kubescheduler.config.k8s.io/v1alpha1
          kind: KubeSchedulerConfiguration
          clientConnection:
            kubeconfig: "${controller_mount_path}/kube-scheduler.kubeconfig"
          leaderElection:
            leaderElect: true

    - path: ${controller_mount_path}/kube-controller-manager.kubeconfig
      filesystem: root
      mode: 420
      contents:
        inline: |-
          apiVersion: v1
          clusters:
          - cluster:
              certificate-authority: ${controller_mount_path}/kubernetes-ca.pem
              server: ${apiserver_local_endpoint}
            name: ${cluster_name}
          contexts:
          - context:
              cluster: ${cluster_name}
              user: system:kube-controller-manager
            name: default
          current-context: default
          kind: Config
          preferences: {}
          users:
          - name: system:kube-controller-manager
            user:
              client-certificate: ${controller_mount_path}/kube-controller-manager.pem
              client-key: ${controller_mount_path}/kube-controller-manager-key.pem

    - path: ${controller_mount_path}/kube-scheduler.kubeconfig
      filesystem: root
      mode: 420
      contents:
        inline: |-
          apiVersion: v1
          clusters:
          - cluster:
              certificate-authority: ${controller_mount_path}/kubernetes-ca.pem
              server: ${apiserver_local_endpoint}
            name: ${cluster_name}
          contexts:
          - context:
              cluster: ${cluster_name}
              user: system:kube-scheduler
            name: default
          current-context: default
          kind: Config
          preferences: {}
          users:
          - name: system:kube-scheduler
            user:
              client-certificate: ${controller_mount_path}/kube-scheduler.pem
              client-key: ${controller_mount_path}/kube-scheduler-key.pem

    - path: ${pod_mount_path}/keepalived/keepalived.conf
      filesystem: root
      mode: 420
      contents:
        inline: |-
          global_defs {
            vrrp_version 3
            vrrp_iptables
            dynamic_interfaces
          }
          vrrp_instance VI_kube-master_store {
            no_accept
            nopreempt
            state BACKUP
            strict_mode off
            virtual_router_id 70
            interface ${host_network.store.if}
            priority 100
            virtual_ipaddress {
              ${services.kubernetes_apiserver.vip}
            }
          }

    - path: ${pod_mount_path}/loki/promtail-config.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          positions:
            filename: /etc/promtail/promtail-positions.yaml
          scrape_configs:
          - job_name: containers
            static_configs:
            - targets:
              - localhost
              labels:
                job: static-pod
                host: ${hostname}
                __path__: /var/log/pods/*/*/*.log
            pipeline_stages:
            - match:
                selector: '{job="static-pod"}'
                stages:
                - cri: {}
                - regex:
                    source: filename
                    expression: "(?:pods)/(?P<namespace>\\S+?)_\\S+?/(?P<container_name>\\S+?)/"
                - labels:
                    namespace:
                    container_name:

    ##
    ## pod manifests
    ##

    - path: ${kubelet_path}/manifests/etcd-wrapper.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          kind: Pod
          apiVersion: v1
          metadata:
            namespace: kube-system
            name: kube-etcd
          spec:
            hostNetwork: true
            restartPolicy: Always
            containers:
            - name: kube-etcd-wrapper
              image: ${container_images.etcd_wrapper}
              args:
              - "--name=$(NODE_NAME)"
              - "--host-cert-file=${controller_mount_path}/etcd.pem"
              - "--host-key-file=${controller_mount_path}/etcd-key.pem"
              - "--host-trusted-ca-file=${controller_mount_path}/etcd-ca.pem"
              - "--host-peer-cert-file=${controller_mount_path}/etcd.pem"
              - "--host-peer-key-file=${controller_mount_path}/etcd-key.pem"
              - "--host-peer-trusted-ca-file=${controller_mount_path}/etcd-ca.pem"
              - "--initial-advertise-peer-urls=https://$(INTERNAL_IP):${services.etcd.ports.peer}"
              - "--listen-peer-urls=https://$(INTERNAL_IP):${services.etcd.ports.peer}"
              - "--listen-client-urls=${etcd_local_endpoint},https://$(INTERNAL_IP):${services.etcd.ports.client}"
              - "--advertise-client-urls=https://$(INTERNAL_IP):${services.etcd.ports.client}"
              - "--initial-cluster=${etcd_initial_cluster}"
              - "--initial-cluster-token=${etcd_cluster_token}"
              - "--etcd-servers=${etcd_endpoints}"
              - "--host-backup-file=${pod_mount_path}/etcd/etcd.db"
              - "--host-etcd-manifest-file=${kubelet_path}/manifests/kube-etcd.json"
              - "--etcd-image=${container_images.etcd}"
              - "--client-cert-file=${controller_mount_path}/etcd-client.pem"
              - "--client-key-file=${controller_mount_path}/etcd-client-key.pem"
              - "--s3-backup-path=${s3_etcd_backup_path}"
              - "--backup-interval=30m"
              - "--healthcheck-interval=10s"
              - "--pod-update-interval=1m"
              env:
              - name: AWS_ACCESS_KEY_ID
                value: "${aws_access_key_id}"
              - name: AWS_SECRET_ACCESS_KEY
                value: "${aws_secret_access_key}"
              - name: AWS_DEFAULT_REGION
                value: "${aws_region}"
              - name: AWS_SDK_LOAD_CONFIG
                value: "1"
              - name: INTERNAL_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.hostIP
              - name: NODE_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: spec.nodeName
              volumeMounts:
              - name: config-volume
                mountPath: "${controller_mount_path}"
                readOnly: true
              - name: etcd-restore-volume
                mountPath: "${pod_mount_path}/etcd"
              - name: manifest-volume
                mountPath: "${kubelet_path}/manifests/kube-etcd.json"
            volumes:
            - name: config-volume
              hostPath:
                path: "${controller_mount_path}"
            - name: etcd-restore-volume
              hostPath:
                path: "${pod_mount_path}/etcd"
            - name: manifest-volume
              hostPath:
                type: FileOrCreate
                path: "${kubelet_path}/manifests/kube-etcd.json"

    - path: ${kubelet_path}/manifests/kube-apiserver.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          kind: Pod
          apiVersion: v1
          metadata:
            namespace: kube-system
            name: kube-apiserver
          spec:
            hostNetwork: true
            restartPolicy: Always
            containers:
            - name: kube-apiserver
              image: ${container_images.kube_apiserver}
              command:
              - kube-apiserver
              - "--secure-port=${services.kubernetes_apiserver.ports.secure}"
              - "--allow-privileged=true"
              - "--advertise-address=$(INTERNAL_IP)"
              - "--authorization-mode=Node,RBAC"
              - "--bind-address=0.0.0.0"
              - "--client-ca-file=${controller_mount_path}/kubernetes-ca.pem"
              - "--etcd-cafile=${controller_mount_path}/etcd-ca.pem"
              - "--etcd-certfile=${controller_mount_path}/etcd-client.pem"
              - "--etcd-keyfile=${controller_mount_path}/etcd-client-key.pem"
              - "--etcd-servers=${etcd_local_endpoint}"
              - "--kubelet-certificate-authority=${controller_mount_path}/kubernetes-ca.pem"
              - "--kubelet-client-certificate=${controller_mount_path}/kubernetes.pem"
              - "--kubelet-client-key=${controller_mount_path}/kubernetes-key.pem"
              - "--runtime-config=api/all=true"
              - "--service-account-key-file=${controller_mount_path}/service-account.pem"
              - "--service-account-max-token-expiration=24h"
              - "--service-cluster-ip-range=${networks.kubernetes_service.network}/${networks.kubernetes_service.cidr}"
              - "--tls-cert-file=${controller_mount_path}/kubernetes.pem"
              - "--tls-private-key-file=${controller_mount_path}/kubernetes-key.pem"
              - "--kubelet-preferred-address-types=InternalIP"
              - "--v=2"
              env:
              - name: INTERNAL_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.hostIP
              volumeMounts:
              - name: config-apiserver
                mountPath: "${controller_mount_path}"
                readOnly: true
              livenessProbe:
                httpGet:
                  scheme: HTTP
                  host: 127.0.0.1
                  port: 8080
                  path: "/healthz"
                initialDelaySeconds: 15
                timeoutSeconds: 15
            - name: keepalived
              image: ${container_images.keepalived}
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
              args: [ "-P", "-D", "-f", "/etc/keepalived/keepalived.conf" ]
              livenessProbe:
                httpGet:
                  scheme: HTTP
                  host: 127.0.0.1
                  port: 8080
                  path: "/healthz"
                initialDelaySeconds: 15
                timeoutSeconds: 15
              volumeMounts:
              - name: config-keepalived
                mountPath: /etc/keepalived/keepalived.conf
                readOnly: true
            volumes:
            - name: config-apiserver
              hostPath:
                path: "${controller_mount_path}"
            - name: config-keepalived
              hostPath:
                path: ${pod_mount_path}/keepalived/keepalived.conf

    - path: ${kubelet_path}/manifests/kube-controller-manager.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          kind: Pod
          apiVersion: v1
          metadata:
            namespace: kube-system
            name: kube-controller-manager
          spec:
            hostNetwork: true
            restartPolicy: Always
            containers:
            - name: kube-controller-manager
              image: ${container_images.kube_controller_manager}
              command:
              - kube-controller-manager
              - "--address=0.0.0.0"
              - "--cluster-cidr=${networks.kubernetes.network}/${networks.kubernetes.cidr}"
              - "--allocate-node-cidrs=true"
              - "--cluster-name=${cluster_name}"
              - "--cluster-signing-cert-file=${controller_mount_path}/kubernetes-ca.pem"
              - "--cluster-signing-key-file=${controller_mount_path}/kubernetes-ca-key.pem"
              - "--kubeconfig=${controller_mount_path}/kube-controller-manager.kubeconfig"
              - "--leader-elect=true"
              - "--root-ca-file=${controller_mount_path}/kubernetes-ca.pem"
              - "--service-account-private-key-file=${controller_mount_path}/service-account-key.pem"
              - "--service-cluster-ip-range=${networks.kubernetes_service.network}/${networks.kubernetes_service.cidr}"
              - "--use-service-account-credentials=true"
              - "--v=2"
              volumeMounts:
              - name: config-volume
                mountPath: "${controller_mount_path}"
                readOnly: true
              livenessProbe:
                httpGet:
                  scheme: HTTP
                  host: 127.0.0.1
                  port: 10252
                  path: "/healthz"
                initialDelaySeconds: 15
                timeoutSeconds: 15
            volumes:
            - name: config-volume
              hostPath:
                path: "${controller_mount_path}"

    - path: ${kubelet_path}/manifests/kube-scheduler.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          kind: Pod
          apiVersion: v1
          metadata:
            namespace: kube-system
            name: kube-scheduler
          spec:
            restartPolicy: Always
            hostNetwork: true
            containers:
            - name: kube-scheduler
              image: ${container_images.kube_scheduler}
              command:
              - kube-scheduler
              - "--config=${controller_mount_path}/kube-scheduler.yaml"
              - "--v=2"
              livenessProbe:
                httpGet:
                  scheme: HTTP
                  host: 127.0.0.1
                  port: 10251
                  path: "/healthz"
                initialDelaySeconds: 15
                timeoutSeconds: 15
              volumeMounts:
              - name: config-volume
                mountPath: "${controller_mount_path}"
                readOnly: true
            volumes:
            - name: config-volume
              hostPath:
                path: "${controller_mount_path}"

    - path: ${kubelet_path}/manifests/promtail.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            namespace: kube-system
            name: loki
          spec:
            restartPolicy: Always
            hostNetwork: true
            containers:
            - name: promtail
              image: ${container_images.promtail}
              args:
              - "-config.file=/etc/promtail/promtail-config.yaml"
              - "-client.url=http://${services.loki.vip}:${services.loki.ports.http_listen}/loki/api/v1/push"
              volumeMounts:
              - name: pods
                mountPath: /var/log/pods
                readOnly: true
              - name: config-promtail
                mountPath: /etc/promtail/promtail-config.yaml
                readOnly: true
            volumes:
            - name: pods
              hostPath:
                path: /var/log/pods
            - name: config-promtail
              hostPath:
                path: ${pod_mount_path}/loki/promtail-config.yaml

passwd:
  users:
  - name: ${user}
    ssh_authorized_keys:
      - ${ssh_authorized_key}
