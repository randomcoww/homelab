---
systemd:
  units:
    - name: NetworkManager.service
      mask: true
    - name: systemd-networkd.service
      enabled: true
    - name: systemd-resolved.service
      enabled: true
    - name: systemd-networkd-wait-online.service
      mask: true
    - name: libvirtd.service
      enabled: true
    - name: ksm.service
      enabled: true
    - name: ksmtuned.service
      enabled: true
    # /etc/fstab is not present in live - use --all
    - name: fstrim.service
      enabled: true
      dropins:
        - name: all.conf
          contents: |
            [Service]
            ExecStart=
            ExecStart=/usr/sbin/fstrim --all --verbose --quiet
    - name: ${join("-", compact(split("/", persistent_home_path)))}.mount
      enabled: true
      contents: |
        [Unit]
        Before=local-fs.target
        ConditionPathExists=${persistent_home_dev}

        [Mount]
        What=${persistent_home_dev}
        Where=${persistent_home_path}

        [Install]
        WantedBy=local-fs.target

storage:
  directories:
    - path: ${persistent_home_path}
      filesystem: root
      overwrite: true
      mode: 0644
      user:
        id: ${uid}

  files:
    - path: /etc/systemd/network/90-default.network
      filesystem: root
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=en*

          [Link]
          ARP=no

          [Network]
          LinkLocalAddressing=no
          DHCP=no
    - path: /etc/systemd/network/80-wl.network
      filesystem: root
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=wl*

          [Link]
          Unmanaged=true

    ##
    ## allocate vlan interfaces to hardware
    ##
    - path: /etc/systemd/network/10-hw.network
      filesystem: root
      mode: 0644
      contents:
        inline: |
          [Match]
          MACAddress=${join(" ", [
            for h in hosts :
            h.host_network.hw.mac
          ])}

          [Link]
          ARP=no
          MTUBytes=${mtu}

          [Network]
          LinkLocalAddressing=no
          DHCP=no
          %{ for k in vlans ~}
          VLAN=${networks[k].br_if}
          %{ endfor ~}

    %{~ for k in vlans ~}
    ##
    ## vlan ${k}
    ##
    - path: /etc/systemd/network/10-${networks[k].br_if}.netdev
      filesystem: root
      mode: 0644
      contents:
        inline: |
          [NetDev]
          Name=${networks[k].br_if}
          Kind=vlan

          [VLAN]
          Id=${networks[k].id}

    %{~ for h in hosts ~}
    %{~ if lookup(h.host_network, k, null) != null ~}
    - path: /etc/systemd/network/10-${networks[k].br_if}-${h.host_network.hw.mac}.network
      filesystem: root
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=${networks[k].br_if}
          MACAddress=${h.host_network.hw.mac}

          [Link]
          ARP=yes
          MTUBytes=${mtu}

          [Network]
          LinkLocalAddressing=no
          DHCP=yes

          [Address]
          Address=${h.host_network[k].ip}/${networks[k].cidr}

    %{~ endif ~}
    %{~ endfor ~}
    %{~ endfor ~}

    ##
    ## certs
    ##
    - path: ${internal_tls_path}/internal-ca.pem
      filesystem: root
      mode: 0644
      contents:
        inline: "${tls_internal_ca}"

    - path: /etc/systemd/journal.conf.d/05-live.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          [Journal]
          Storage=volatile
          RuntimeMaxUse=15M
          ForwardToSyslog=no
          ForwardToConsole=no
    - path: /etc/systemd/resolved.conf.d/05-disable-stub.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          [Resolve]
          FallbackDNS=
          DNSStubListener=no
    - path: /etc/systemd/system.conf.d/05-live.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          [Manager]
          DumpCore=no

passwd:
  users:
    - name: ${user}
      groups:
        - adm
        - sudo
        - systemd-journal
        - wheel
        - libvirt
      password_hash: ${bcrypt(password)}
      home_dir: ${persistent_home_path}/${user}
      uid: ${uid}