---
networkd:
  units:
    - name: 00-${host_network.store.if}.network
      contents: |
        [Match]
        Name=${host_network.store.if}

        [Network]
        LinkLocalAddressing=no
        DHCP=no

        [Address]
        Address=${host_network.store.ip}/${networks.store.cidr}

    - name: 00-${host_network.lan.if}.network
      contents: |
        [Match]
        Name=${host_network.lan.if}

        [Network]
        LinkLocalAddressing=no
        DHCP=no

        [Address]
        Address=${host_network.lan.ip}/${networks.lan.cidr}

    - name: 00-${host_network.sync.if}.network
      contents: |
        [Match]
        Name=${host_network.sync.if}

        [Network]
        LinkLocalAddressing=no
        DHCP=no

        [Address]
        Address=${host_network.sync.ip}/${networks.sync.cidr}

    - name: 00-${host_network.host_wan.if}.network
      contents: |
        [Match]
        Name=${host_network.host_wan.if}

        [Network]
        LinkLocalAddressing=no
        DHCP=yes
        DNS=${dns_forward_ip}
        DNSOverTLS=opportunistic
        Domains=~

        [DHCP]
        UseMTU=true
        UseDNS=false
        UseNTP=false
        SendHostname=false
        UseHostname=false
        UseDomains=false
        UseTimezone=no
        RouteMetric=512

    - name: 00-${host_network.wan.if}.network
      contents: |
        [Match]
        Name=${host_network.wan.if}

        [Network]
        LinkLocalAddressing=no
        DHCP=yes

        [DHCP]
        UseMTU=true
        UseDNS=false
        UseNTP=false
        SendHostname=false
        UseHostname=false
        UseDomains=false
        UseTimezone=no
        RouteMetric=512
        RouteTable=${host_network.wan.route_table}

    - name: 00-${host_network.int.if}.network
      contents: |
        [Match]
        Name=${host_network.int.if}

        [Link]
        ARP=no

        [Network]
        LinkLocalAddressing=no
        DHCP=no

systemd:
  units:
    - name: ntpd.service
      enabled: true
    - name: docker.service
      mask: true
    - name: docker.socket
      mask: true
    - name: containerd.service
      enabled: true
      dropins:
        - name: containerd.conf
          contents: |
            [Service]
            LimitNOFILE=infinity
            ExecStart=
            ExecStart=/usr/bin/env PATH=$${TORCX_BINDIR}:$${PATH} $${TORCX_BINDIR}/containerd
            RestartSec=5
    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubelet via Hyperkube ACI
        After=network.target

        [Service]
        ExecStartPre=/bin/mkdir -p \
          ${kubelet_path} \
          /var/log/containers \
          /etc/cni/net.d
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid
        ExecStart=/usr/bin/rkt run \
          --uuid-file-save=/var/cache/kubelet-pod.uuid \
          --volume var-lib-containerd,kind=host,source=/var/lib/containerd,readOnly=false \
          --mount volume=var-lib-containerd,target=/var/lib/containerd \
          --insecure-options=image \
          --volume coreos-var-lib-kubelet,kind=host,source=${kubelet_path},readOnly=false,recursive=true \
          --volume coreos-var-log,kind=host,source=/var/log,readOnly=false \
          --volume coreos-run,kind=host,source=/run,readOnly=false \
          --mount volume=coreos-var-lib-kubelet,target=${kubelet_path} \
          --mount volume=coreos-var-log,target=/var/log \
          --mount volume=coreos-run,target=/run \
          --dns host \
          --hosts-entry host \
          --stage1-from-dir=stage1-fly.aci \
          docker://${container_images.kubelet} \
            --exec=/usr/local/bin/kubelet -- \
            --config=${kubelet_path}/kubelet-config.yaml \
            --node-ip=${host_network.store.ip} \
            --register-node=false \
            --container-runtime=remote \
            --container-runtime-endpoint=unix:///run/containerd/containerd.sock
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid
        Restart=always
        RestartSec=5

        [Install]
        WantedBy=multi-user.target

storage:
  files:
    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline:
          ${hostname}
    - path: /etc/sysctl.d/ipforward.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          net.ipv4.ip_forward=1
          net.ipv4.ip_nonlocal_bind=1
    - path: /etc/sysctl.d/max-user-watches.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          fs.inotify.max_user_watches=16184

    - path: /etc/containerd/config.toml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          version = 2
          root = "/var/lib/containerd"
          oom_score = -999
          [plugins]
            [plugins."io.containerd.grpc.v1.cri"]
              [plugins."io.containerd.grpc.v1.cri".containerd]
                snapshotter = "overlayfs"
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
                  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                    # runtime_type should be normally be "io.containerd.runc.v*"
                    # containerd-shim-runc-v* binaries are needed but not provided in the flatcar image
                    runtime_type = "io.containerd.runtime.v1.linux"
            [plugins."io.containerd.runtime.v1.linux"]
              no_pivot = true

    - path: ${kubelet_path}/kubelet-config.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            anonymous:
              enabled: true
            webhook:
              enabled: false
          authorization:
            mode: AlwaysAllow
          staticPodPath: ${kubelet_path}/manifests
          makeIPTablesUtilChains: false

    ##
    ## pod config
    ##

    - path: ${pod_mount_path}/coredns/Corefile
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ${domains.internal}:53 {
            errors
            forward . ${services.internal_dns.vip}
          }
          ${domains.kubernetes_cluster}:53 {
            errors
            forward . ${services.internal_dns.vip}
          }
          .:53 {
            errors
            health
            forward . tls://${dns_forward_ip} {
              tls_servername ${dns_forward_tls_servername}
              health_check 20s
            }
            prometheus :${services.recursive_dns.ports.prometheus}
            cache 30
            reload
            loadbalance
          }

    - path: ${pod_mount_path}/keepalived/keepalived.conf
      filesystem: root
      mode: 420
      contents:
        inline: |-
          global_defs {
            vrrp_version 3
            vrrp_iptables
            dynamic_interfaces
          }
          vrrp_instance VI_gateway {
            nopreempt
            state BACKUP
            strict_mode off
            virtual_router_id 247
            interface ${host_network.store.if}
            priority 100
            virtual_ipaddress {
              %{~ for k in keys(networks) ~}
              %{~ if lookup(networks[k], "router", null) != null ~}
              ${networks[k].router} dev ${host_network[k].if}
              %{~ endif ~}
              %{~ endfor ~}
              ${services.recursive_dns.vip} dev ${host_network.store.if}
            }
            virtual_rules {
              %{~ for k in keys(networks) ~}
              %{~ if lookup(networks[k], "router", null) != null ~}
              to ${networks[k].network}/${networks[k].cidr} lookup main priority 32758
              iif ${host_network[k].if} lookup ${host_network.wan.route_table} priority 32760
              %{~ endif ~}
              %{~ endfor ~}
            }
          }

    - path: ${pod_mount_path}/conntrackd/conntrackd.conf
      filesystem: root
      mode: 420
      contents:
        inline: |-
          Sync {
            Mode FTFW {
              # StartupResync on
              DisableExternalCache on
            }

            Multicast {
              IPv4_address 225.0.0.50
              Group 3780
              IPv4_interface ${host_network.sync.ip}
              Interface ${host_network.sync.if}
              SndSocketBuffer 24985600
              RcvSocketBuffer 24985600
              Checksum on
            }

            Options {
              TCPWindowTracking on
              ExpectationSync on
            }
          }

          General {
            LogFile /dev/stdout
            HashSize 32768
            HashLimit 131072
            NetlinkBufferSize 2097152
            NetlinkBufferSizeMaxGrowth 8388608
            NetlinkEventsReliable on

            UNIX {
              Path /var/run/conntrackd.ctl
            }

            Filter From Kernelspace {
              Address Ignore {
                IPv4_address 127.0.0.1
                IPv4_address ${services.recursive_dns.vip}
                %{~ for k in keys(host_network) ~}
                %{~ if lookup(host_network[k], "ip", null) != null ~}
                IPv4_address ${host_network[k].ip}
                %{~ endif ~}
                %{~ endfor ~}
                %{~ for k in keys(networks) ~}
                %{~ if lookup(networks[k], "router", null) != null ~}
                IPv4_address ${networks[k].router}
                %{~ endif ~}
                %{~ endfor ~}
              }
            }
          }

    - path: ${pod_mount_path}/nftables/nft.rules
      filesystem: root
      mode: 420
      contents:
        inline: |-
          define if_internal = { ${join(",", [
            for k in keys(networks):
            "${host_network[k].if}"
            if lookup(networks[k], "dhcp_pool", null) != null && lookup(networks[k], "router", null) != null
          ])} }
          define if_external = ${host_network.wan.if}
          define if_trusted = ${host_network.store.if}
          define if_sync = ${host_network.sync.if}

          table ip filter {
            chain base_checks {
              ct state {established, related} accept;
              ct state invalid drop;
            }

            chain input {
              type filter hook input priority 0; policy drop;

              jump base_checks;

              iifname "lo" accept;
              iifname != "lo" ip daddr 127.0.0.1/8 drop;

              ip protocol icmp icmp type { echo-request, echo-reply, time-exceeded, parameter-problem, destination-unreachable } accept;

              iifname $if_trusted accept;
              iifname $if_sync accept;

              iifname $if_internal tcp dport domain accept;
              iifname $if_internal udp dport domain accept;
              iifname $if_internal udp sport bootps udp dport bootpc accept;
              iifname $if_internal pkttype multicast accept;
            }

            chain forward {
              type filter hook forward priority 0; policy drop;

              jump base_checks;

              ip protocol icmp icmp type { echo-request, echo-reply, time-exceeded, parameter-problem, destination-unreachable } accept;

              iifname $if_trusted accept;
              iifname $if_internal oifname $if_external accept;

              iifname $if_internal ip daddr ${networks.metallb.network}/${networks.metallb.cidr} accept;
            }

            chain output {
              type filter hook output priority 100; policy accept;
            }
          }

          table ip nat {
            chain prerouting {
              type nat hook prerouting priority 0; policy accept;
            }

            chain input {
              type nat hook input priority 0; policy accept;
            }

            chain output {
              type nat hook output priority 0; policy accept;
            }

            chain postrouting {
              type nat hook postrouting priority 100; policy accept;
              oifname $if_external masquerade;
            }
          }
          ;

    - path: ${pod_mount_path}/kea/kea-ctrl-agent.conf
      filesystem: root
      mode: 420
      contents:
        inline: |-
          {
            "Control-agent": {
              "http-host": "0.0.0.0",
              "http-port": ${services.kea.ports.peer},
              "control-sockets": {
                "dhcp4": {
                  "socket-type": "unix",
                  "socket-name": "${kea_path}/kea-dhcp4-ctrl.sock"
                }
              }
            }
          }

    - path: ${pod_mount_path}/kea/kea-dhcp4.conf
      filesystem: root
      mode: 420
      contents:
        inline: |-
          {
            "Dhcp4": {
              "valid-lifetime": 1200,
              "renew-timer": 1200,
              "rebind-timer": 1200,
              "interfaces-config": {
                "interfaces": ${jsonencode([
                for k in keys(networks):
                "${host_network[k].if}"
                if lookup(networks[k], "dhcp_pool", null) != null && lookup(networks[k], "router", null) != null
                ])}
              },
              "control-socket": {
                "socket-type": "unix",
                "socket-name": "${kea_path}/kea-dhcp4-ctrl.sock"
              },
              "option-data": [
                {
                  "name": "domain-name",
                  "data": "${domains.internal}"
                },
                {
                  "name": "domain-name-servers",
                  "data": "${services.recursive_dns.vip}",
                  "csv-format": true
                },
                {
                  "name": "interface-mtu",
                  "data": "${mtu}"
                }
              ],
              "hooks-libraries": [
                {
                  "library": "${kea_hooks_path}/libdhcp_lease_cmds.so",
                  "parameters": {}
                },
                {
                  "library": "${kea_hooks_path}/libdhcp_ha.so",
                  "parameters": {
                    "high-availability": [
                      {
                        "this-server-name": "${hostname}",
                        "mode": "hot-standby",
                        "max-unacked-clients": 0,
                        "peers": ${kea_ha_peers}
                      }
                    ]
                  }
                }
              ],
              "subnet4": ${jsonencode([
                for k in keys(networks):
                {
                  subnet = "${networks[k].network}/${networks[k].cidr}",
                  option-data = [
                    {
                      name = "routers"
                      data = "${networks[k].router}"
                    }
                  ]
                  pools = [
                    {
                      pool = "${networks[k].dhcp_pool}"
                    }
                  ]
                }
                if lookup(networks[k], "dhcp_pool", null) != null && lookup(networks[k], "router", null) != null
              ])},
              "dhcp-ddns": {
                "enable-updates": true,
                "qualifying-suffix": "${domains.internal}.",
                "override-client-update": true,
                "override-no-update": true,
                "replace-client-name": "when-not-present"
              }
            }
          }

    - path: ${pod_mount_path}/loki/promtail-config.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          positions:
            filename: /etc/promtail/promtail-positions.yaml
          scrape_configs:
          - job_name: containers
            static_configs:
            - targets:
              - localhost
              labels:
                job: static-pod
                host: ${hostname}
                __path__: /var/log/pods/*/*/*.log
            pipeline_stages:
            - match:
                selector: '{job="static-pod"}'
                stages:
                - cri: {}
                - regex:
                    source: filename
                    expression: "(?:pods)/(?P<namespace>\\S+?)_\\S+?/(?P<container_name>\\S+?)/"
                - labels:
                    namespace:
                    container_name:

    ##
    ## pod manifests
    ##

    - path: ${kubelet_path}/manifests/kea.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            name: kea
          spec:
            restartPolicy: Always
            hostNetwork: true
            containers:
            - name: kea-control-agent
              image: ${container_images.kea}
              args: [ "kea-ctrl-agent", "-c", "/etc/kea/kea-ctrl-agent.conf" ]
              volumeMounts:
              - name: kea-share
                mountPath: "${kea_path}"
                readOnly: false
              - name: config-kea-ctrl-agent
                mountPath: /etc/kea/kea-ctrl-agent.conf
                readOnly: true
            - name: kea-dhcp4
              image: ${container_images.kea}
              args: [ "kea-dhcp4", "-c", "/etc/kea/kea-dhcp4.conf" ]
              volumeMounts:
              - name: kea-share
                mountPath: "${kea_path}"
                readOnly: false
              - name: config-kea-dhcp4
                mountPath: /etc/kea/kea-dhcp4.conf
                readOnly: true
            volumes:
            - name: kea-share
              emptyDir: {}
            - name: config-kea-ctrl-agent
              hostPath:
                path: ${pod_mount_path}/kea/kea-ctrl-agent.conf
            - name: config-kea-dhcp4
              hostPath:
                path: ${pod_mount_path}/kea/kea-dhcp4.conf

    - path: ${kubelet_path}/manifests/gateway-node.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            namespace: kube-system
            name: gateway-node
          spec:
            restartPolicy: Always
            hostNetwork: true
            initContainers:
            - name: nftables
              image: ${container_images.nftables}
              args: [ "-f", "/etc/nftables/nft.rules" ]
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
              volumeMounts:
              - name: config-nftables
                mountPath: /etc/nftables/nft.rules
                readOnly: true
            containers:
            - name: coredns
              image: "${container_images.coredns}"
              resources:
                limits:
                  memory: 170Mi
                requests:
                  cpu: 100m
                  memory: 70Mi
              args: [ "-conf", "/etc/coredns/Corefile" ]
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 15
                timeoutSeconds: 5
                successThreshold: 1
                failureThreshold: 5
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  add:
                  - NET_BIND_SERVICE
                  drop:
                  - all
                readOnlyRootFilesystem: true
              volumeMounts:
              - name: config-coredns
                mountPath: /etc/coredns/Corefile
                readOnly: true
            - name: keepalived
              image: ${container_images.keepalived}
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
              args: [ "-P", "-D", "-f", "/etc/keepalived/keepalived.conf" ]
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 15
                timeoutSeconds: 5
                successThreshold: 1
                failureThreshold: 5
              volumeMounts:
              - name: config-keepalived
                mountPath: /etc/keepalived/keepalived.conf
                readOnly: true
            volumes:
            - name: config-nftables
              hostPath:
                path: ${pod_mount_path}/nftables/nft.rules
            - name: config-coredns
              hostPath:
                path: ${pod_mount_path}/coredns/Corefile
            - name: config-keepalived
              hostPath:
                path: ${pod_mount_path}/keepalived/keepalived.conf

    - path: ${kubelet_path}/manifests/conntrackd.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            namespace: kube-system
            name: conntrackd
          spec:
            restartPolicy: Always
            hostNetwork: true
            containers:
            - name: conntrackd
              image: ${container_images.conntrackd}
              args: [ "-C", "/etc/conntrackd/conntrackd.conf" ]
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
                  - SYS_NICE
              volumeMounts:
              - name: config-volume
                mountPath: /etc/conntrackd/conntrackd.conf
                readOnly: true
            volumes:
            - name: config-volume
              hostPath:
                path: ${pod_mount_path}/conntrackd/conntrackd.conf

    - path: ${kubelet_path}/manifests/promtail.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            namespace: kube-system
            name: loki
          spec:
            restartPolicy: Always
            hostNetwork: true
            containers:
            - name: promtail
              image: ${container_images.promtail}
              args:
              - "-config.file=/etc/promtail/promtail-config.yaml"
              - "-client.url=http://${services.loki.vip}:${services.loki.ports.http_listen}/loki/api/v1/push"
              volumeMounts:
              - name: pods
                mountPath: /var/log/pods
                readOnly: true
              - name: config-promtail
                mountPath: /etc/promtail/promtail-config.yaml
                readOnly: true
            volumes:
            - name: pods
              hostPath:
                path: /var/log/pods
            - name: config-promtail
              hostPath:
                path: ${pod_mount_path}/loki/promtail-config.yaml

passwd:
  users:
  - name: ${user}
    ssh_authorized_keys:
      - ${ssh_authorized_key}
