---
variant: fcos
version: 1.0.0
systemd:
  units:
    - name: nftables.service
      enabled: true
    - name: keepalived.service
      enabled: true
      dropins:
        - name: 10-dependency.conf
          contents: |
            [Unit]
            Requires=nftables.service
            PartOf=nftables.service

            [Service]
            EnvironmentFile=
            Environment=KEEPALIVED_OPTIONS="-D -P"

storage:
  files:
    - path: /etc/systemd/network/10-${p.networks_by_key.sync.if}.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=${p.networks_by_key.sync.if}

          [Link]
          MTUBytes=${p.networks_by_key.sync.mtu}

          [Network]
          LinkLocalAddressing=false
          DHCP=false

          [Address]
          Address=${p.networks_by_key.sync.ip}/${p.networks_by_key.sync.cidr}

          [Route]
          Gateway=${p.networks_by_key.sync.router}
          Destination=0.0.0.0/0
          Table=${slave_default_route_table}

          [RoutingPolicyRule]
          Table=${slave_default_route_table}
          Priority=${slave_default_route_priority}
    - path: /etc/systemd/network/10-${p.networks_by_key.wan.if}.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=${p.networks_by_key.wan.if}

          [Link]
          RequiredForOnline=false

          [Network]
          LinkLocalAddressing=false
          DHCP=true
          DNS=${dns_forward_ip}
          DNSOverTLS=opportunistic
          Domains=~

          [DHCP]
          UseMTU=true
          UseDNS=false
          UseNTP=false
          SendHostname=false
          UseHostname=false
          UseDomains=false
          UseTimezone=false
          RouteTable=${master_default_route_table}

    - path: /etc/keepalived/keepalived.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |-
          global_defs {
            vrrp_version 3
            vrrp_iptables
            dynamic_interfaces allow_if_changes
          }
          vrrp_sync_group VG_gateway {
            group {
              %{~ for k, v in p.networks_by_key ~}
              %{~ if lookup(v, "router", null) != null ~}
              VI_gateway_${k}
              %{~ endif ~}
              %{~ endfor ~}
            }
          }
          %{~ for k, v in p.networks_by_key ~}
          %{~ if lookup(v, "router", null) != null ~}
          vrrp_instance VI_gateway_${k} {
            nopreempt
            state BACKUP
            strict_mode off
            virtual_router_id ${vrrp_gateway_id}
            interface ${v.if}
            priority 100
            virtual_rules {
              to all lookup ${master_default_route_table} priority ${master_default_route_priority}
            }
            virtual_ipaddress {
              ${v.router}
            }
          }
          %{~ endif ~}
          %{~ endfor ~}
    - path: /etc/sysconfig/nftables.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |-
          define if_internal = { ${join(",", [
            for k in p.network:
            "${k.if}"
            if lookup(k, "dhcp_pool", null) != null && lookup(k, "router", null) != null
          ])} }
          define if_external = ${p.networks_by_key.wan.if}
          define if_trusted = ${p.networks_by_key.main.if}
          define if_sync = ${p.networks_by_key.sync.if}

          table ip filter {
            chain base_checks {
              ct state {established, related} accept;
              ct state invalid drop;
            }

            chain input {
              type filter hook input priority 0; policy drop;

              jump base_checks;

              iifname "lo" accept;
              iifname != "lo" ip daddr 127.0.0.1/8 drop;

              ip protocol icmp icmp type { echo-request, echo-reply, time-exceeded, parameter-problem, destination-unreachable } accept;

              iifname $if_trusted accept;
              iifname $if_sync accept;

              iifname $if_internal tcp dport domain accept;
              iifname $if_internal udp dport domain accept;
              iifname $if_internal udp sport bootps udp dport bootpc accept;
              iifname $if_internal pkttype multicast accept;
            }

            chain forward {
              type filter hook forward priority 0; policy drop;

              jump base_checks;

              ip protocol icmp icmp type { echo-request, echo-reply, time-exceeded, parameter-problem, destination-unreachable } accept;

              iifname $if_trusted accept;
              iifname $if_sync accept;
              iifname $if_internal oifname $if_external accept;

              %{~ for v in values(loadbalancer_pools) ~}
              iifname $if_internal ip daddr ${v.network}/${v.cidr} accept;
              %{~ endfor ~}
            }

            chain output {
              type filter hook output priority 100; policy accept;
            }
          }

          table ip nat {
            chain prerouting {
              type nat hook prerouting priority 0; policy accept;
            }

            chain input {
              type nat hook input priority 0; policy accept;
            }

            chain output {
              type nat hook output priority 0; policy accept;
            }

            chain postrouting {
              type nat hook postrouting priority 100; policy accept;
              oifname $if_external masquerade;
            }
          }
          ;

    ##
    ## pod config
    ##

    - path: ${pod_mount_path}/coredns/Corefile
      mode: 0644
      contents:
        inline: |-
          ${domains.internal}:53 {
            errors
            forward . ${services.internal_dns.vip}
          }
          ${domains.kubernetes_cluster}:53 {
            errors
            forward . ${services.internal_dns.vip}
          }
          .:53 {
            errors
            health
            forward . tls://${dns_forward_ip} {
              tls_servername ${dns_forward_tls_servername}
              health_check 20s
            }
            prometheus :${services.recursive_dns.ports.prometheus}
            cache 30
            reload
            loadbalance
          }

    - path: ${pod_mount_path}/conntrackd/conntrackd.conf
      mode: 0644
      contents:
        inline: |-
          Sync {
            Mode FTFW {
              StartupResync on
              DisableExternalCache on
            }

            Multicast {
              IPv4_address 225.0.0.50
              Group 3780
              IPv4_interface ${p.networks_by_key.sync.ip}
              Interface ${p.networks_by_key.sync.if}
              SndSocketBuffer 24985600
              RcvSocketBuffer 24985600
              Checksum on
            }

            Options {
              TCPWindowTracking on
              ExpectationSync on
            }
          }

          General {
            Systemd off
            LogFile /dev/stdout
            Syslog off
            HashSize 32768
            HashLimit 131072
            NetlinkBufferSize 2097152
            NetlinkBufferSizeMaxGrowth 8388608
            NetlinkEventsReliable on

            UNIX {
              Path /var/run/conntrackd.ctl
            }

            Filter From Kernelspace {
              Address Ignore {
                IPv4_address 127.0.0.1
                IPv4_address ${services.recursive_dns.vip}
                IPv4_address ${p.networks_by_key.sync.network}/${p.networks_by_key.sync.cidr}
                %{~ for k in p.network ~}
                %{~ if lookup(k, "ip", null) != null ~}
                IPv4_address ${k.ip}
                %{~ endif ~}
                %{~ endfor ~}
                %{~ for k in p.network ~}
                %{~ if lookup(k, "router", null) != null ~}
                IPv4_address ${k.router}
                %{~ endif ~}
                %{~ endfor ~}
              }
            }
          }

    - path: ${pod_mount_path}/kea/kea-ctrl-agent.conf
      mode: 0644
      contents:
        inline: |-
          {
            "Control-agent": {
              "http-host": "0.0.0.0",
              "http-port": ${services.kea.ports.peer},
              "control-sockets": {
                "dhcp4": {
                  "socket-type": "unix",
                  "socket-name": "${kea_path}/kea-dhcp4-ctrl.sock"
                }
              }
            }
          }

    - path: ${pod_mount_path}/kea/kea-dhcp4.conf
      mode: 0644
      contents:
        inline: |-
          {
            "Dhcp4": {
              "valid-lifetime": 1200,
              "renew-timer": 300,
              "rebind-timer": 600,
              "lease-database": {
                "type": "memfile",
                "persist": true,
                "name": "${kea_path}/kea-leases4.csv"
              },
              "interfaces-config": {
                "interfaces": ${jsonencode([
                  for k in p.network:
                  k.if
                  if lookup(k, "dhcp_pool", null) != null && lookup(k, "router", null) != null
                ])}
              },
              "control-socket": {
                "socket-type": "unix",
                "socket-name": "${kea_path}/kea-dhcp4-ctrl.sock"
              },
              "option-data": [
                {
                  "name": "domain-name",
                  "data": "${domains.internal}"
                },
                {
                  "name": "domain-name-servers",
                  "data": "${services.recursive_dns.vip}",
                  "csv-format": true
                }
              ],
              "hooks-libraries": [
                {
                  "library": "${kea_hooks_path}/libdhcp_lease_cmds.so",
                  "parameters": {}
                },
                {
                  "library": "${kea_hooks_path}/libdhcp_ha.so",
                  "parameters": {
                    "high-availability": [
                      {
                        "this-server-name": "${p.hostname}",
                        "mode": "hot-standby",
                        "max-unacked-clients": 0,
                        "peers": ${kea_ha_peers}
                      }
                    ]
                  }
                }
              ],
              "subnet4": ${jsonencode([
                for k in p.network:
                {
                  subnet = "${k.network}/${k.cidr}",
                  option-data = concat([
                    {
                      name = "routers"
                      data = k.router
                    }
                  ], lookup(k, "mtu", null) != null ? [
                    {
                      name = "interface-mtu"
                      data = format("%s", k.mtu)
                    }
                  ] : [])
                  pools = [
                    {
                      pool = k.dhcp_pool
                    }
                  ]
                }
                if lookup(k, "dhcp_pool", null) != null && lookup(k, "router", null) != null
              ])},
              "dhcp-ddns": {
                "enable-updates": true,
                "qualifying-suffix": "${domains.internal}.",
                "override-client-update": true,
                "override-no-update": true,
                "replace-client-name": "when-not-present"
              }
            }
          }

    - path: ${pod_mount_path}/keepalived/keepalived.conf
      mode: 0644
      contents:
        inline: |-
          global_defs {
            vrrp_version 3
            vrrp_iptables
            dynamic_interfaces allow_if_changes
          }
          vrrp_instance VI_dns_main {
            nopreempt
            state BACKUP
            strict_mode off
            virtual_router_id ${vrrp_dns_id}
            interface ${p.networks_by_key.main.if}
            priority 100
            virtual_ipaddress {
              ${services.recursive_dns.vip}
            }
          }

    ##
    ## pod manifests
    ##

    - path: ${kubelet_path}/manifests/kea.yaml
      mode: 0644
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            name: kea
          spec:
            restartPolicy: Always
            hostNetwork: true
            containers:
            - name: kea-control-agent
              image: ${container_images.kea}
              args: [ "kea-ctrl-agent", "-c", "/etc/kea/kea-ctrl-agent.conf" ]
              volumeMounts:
              - name: kea-share
                mountPath: "${kea_path}"
                readOnly: false
              - name: config-kea-ctrl-agent
                mountPath: /etc/kea/kea-ctrl-agent.conf
                readOnly: true
            - name: kea-dhcp4
              image: ${container_images.kea}
              args: [ "kea-dhcp4", "-c", "/etc/kea/kea-dhcp4.conf" ]
              volumeMounts:
              - name: kea-share
                mountPath: "${kea_path}"
                readOnly: false
              - name: config-kea-dhcp4
                mountPath: /etc/kea/kea-dhcp4.conf
                readOnly: true
            volumes:
            - name: kea-share
              emptyDir: {}
            - name: config-kea-ctrl-agent
              hostPath:
                path: ${pod_mount_path}/kea/kea-ctrl-agent.conf
            - name: config-kea-dhcp4
              hostPath:
                path: ${pod_mount_path}/kea/kea-dhcp4.conf

    - path: ${kubelet_path}/manifests/coredns.yaml
      mode: 0644
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            namespace: kube-system
            name: coredns
          spec:
            restartPolicy: Always
            hostNetwork: true
            containers:
            - name: coredns
              image: "${container_images.coredns}"
              resources:
                limits:
                  memory: 170Mi
                requests:
                  cpu: 100m
                  memory: 70Mi
              args: [ "-conf", "/etc/coredns/Corefile" ]
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 15
                timeoutSeconds: 5
                successThreshold: 1
                failureThreshold: 5
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  add:
                  - NET_BIND_SERVICE
                  drop:
                  - all
                readOnlyRootFilesystem: true
              volumeMounts:
              - name: config-coredns
                mountPath: /etc/coredns/Corefile
                readOnly: true
            - name: keepalived
              image: ${container_images.keepalived}
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
              args: [ "-P", "-D", "-f", "/etc/keepalived/keepalived.conf" ]
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 15
                timeoutSeconds: 5
                successThreshold: 1
                failureThreshold: 5
              volumeMounts:
              - name: config-keepalived
                mountPath: /etc/keepalived/keepalived.conf
                readOnly: true
            volumes:
            - name: config-coredns
              hostPath:
                path: ${pod_mount_path}/coredns/Corefile
            - name: config-keepalived
              hostPath:
                path: ${pod_mount_path}/keepalived/keepalived.conf

    - path: ${kubelet_path}/manifests/conntrackd.yaml
      mode: 0644
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            namespace: kube-system
            name: conntrackd
          spec:
            restartPolicy: Always
            hostNetwork: true
            containers:
            - name: conntrackd
              image: ${container_images.conntrackd}
              args: [ "-C", "/etc/conntrackd/conntrackd.conf" ]
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
                  - SYS_NICE
              volumeMounts:
              - name: config-volume
                mountPath: /etc/conntrackd/conntrackd.conf
                readOnly: true
            volumes:
            - name: config-volume
              hostPath:
                path: ${pod_mount_path}/conntrackd/conntrackd.conf