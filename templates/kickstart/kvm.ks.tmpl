## Not used for live images. Add this to lorax template.
# bootloader --append="console=tty0 console=ttyS1,115200n8 elevator=noop intel_iommu=on amd_iommu=on iommu=pt rd.live.ram=1"

%packages --excludeWeakdeps --excludedocs

libvirt-daemon-kvm
ksmtuned
kea

%end

user --name=${user} --password=${password} --plaintext --groups=wheel,libvirt
sshkey --username=${user} "${ssh_authorized_key}"

%post --erroronfail

##############################################
## networkd
##############################################

##
## allocate vlan interfaces to hardware
##

cat <<EOF > /etc/systemd/network/00-${host_network.hw.if}.network
[Match]
Name=${host_network.hw.if}

[Link]
ARP=no
MTUBytes=${mtu}

[Network]
LinkLocalAddressing=no
DHCP=no
%{ for k in vlans ~}
VLAN=${networks[k].br_if}
%{ endfor ~}
EOF
%{ for k in vlans ~}

##
## vlan ${k}
##

cat <<EOF > /etc/systemd/network/00-${networks[k].br_if}.netdev
[NetDev]
Name=${networks[k].br_if}
Kind=vlan

[VLAN]
Id=${networks[k].id}
EOF
%{ if lookup(host_network, k, null) != null ~}

## host macvtap on vlan ${k}
cat <<EOF > /etc/systemd/network/00-${networks[k].br_if}.network
[Match]
Name=${networks[k].br_if}

[Link]
ARP=no
MTUBytes=${mtu}

[Network]
LinkLocalAddressing=no
DHCP=no
MACVTAP=${k}-tap
EOF

cat <<EOF > /etc/systemd/network/00-${k}-tap.netdev
[NetDev]
Name=${k}-tap
Kind=macvtap

[MACVTAP]
Mode=bridge
EOF

cat <<EOF > /etc/systemd/network/00-${k}-tap.network
[Match]
Name=${k}-tap

[Link]
MTUBytes=${mtu}

[Network]
LinkLocalAddressing=no
DHCP=yes

[Address]
Address=${host_network[k].ip}/${networks[k].cidr}
EOF
%{ endif ~}
%{ endfor ~}

%{ for k in keys(internal_networks) ~}
##
## internal network ${k} for host <-> local vm
##

cat <<EOF > /etc/systemd/network/00-${internal_networks[k].if}.netdev
[NetDev]
Name=${internal_networks[k].if}
Kind=bridge
EOF

cat <<EOF > /etc/systemd/network/00-${internal_networks[k].if}.network
[Match]
Name=${internal_networks[k].if}

[Link]
ARP=no

[Network]
LinkLocalAddressing=no
DHCP=no
MACVTAP=${k}-tap
Bridge=${k}-dummy
EOF

cat <<EOF > /etc/systemd/network/00-${k}-dummy.netdev
[NetDev]
Name=${k}-dummy
Kind=dummy
EOF

cat <<EOF > /etc/systemd/network/00-${k}-dummy.network
[Match]
Name=${k}-dummy

[Link]
ARP=no

[Network]
LinkLocalAddressing=no
DHCP=no
Bridge=${internal_networks[k].if}
EOF

cat <<EOF > /etc/systemd/network/00-${k}-tap.netdev
[NetDev]
Name=${k}-tap
Kind=macvtap

[MACVTAP]
Mode=bridge
EOF

cat <<EOF > /etc/systemd/network/00-${k}-tap.network
[Match]
Name=${k}-tap

[Network]
LinkLocalAddressing=no
DHCP=no

[Address]
Address=${internal_networks[k].ip}/${networks[k].cidr}
EOF
%{ endfor ~}

##############################################
## matchbox
##############################################

mkdir -p \
  ${certs_path} \
  ${matchbox_data_path} \
  ${matchbox_assets_path}

cat <<EOF > ${certs_path}/matchbox-ca.pem
${tls_matchbox_ca}
EOF

cat <<EOF > ${certs_path}/matchbox.pem
${tls_matchbox}
EOF

cat <<EOF > ${certs_path}/matchbox-key.pem
${tls_matchbox_key}
EOF

curl -o matchbox.tar.gz \
  -LO ${matchbox_url}
tar xzf matchbox.tar.gz --strip 1 -C /usr/local/bin/ */matchbox
rm -f matchbox.tar.gz

cat <<EOF > /etc/systemd/system/matchbox.service
[Unit]
Description=CoreOS Matchbox
After=network.target

[Service]
ExecStart=/usr/local/bin/matchbox \\
  -address=${services.renderer.vip}:${services.renderer.ports.http} \\
  -rpc-address=0.0.0.0:${services.renderer.ports.rpc} \\
  -ca-file=${certs_path}/matchbox-ca.pem \\
  -cert-file=${certs_path}/matchbox.pem \\
  -key-file=${certs_path}/matchbox-key.pem \\
  -data-path=${matchbox_data_path} \\
  -assets-path=${matchbox_assets_path}
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

##############################################
## internal kea
##############################################

mkdir -p /etc/kea
cat <<EOF > /etc/kea/kea-dhcp4.conf
{
  "Dhcp4": {
    "interfaces-config": {
      "interfaces": ${jsonencode([
        for k in keys(internal_networks):
        "${k}-tap"
        if lookup(networks[k], "dhcp_pool", null) != null
      ])}
    },
    "client-classes": [
      {
        "name": "ipxe_detected",
        "test": "substring(option[77].hex,0,4) == 'iPXE'",
        "boot-file-name": "http://${services.renderer.vip}:${services.renderer.ports.http}/boot.ipxe"
      }
    ],
    "subnet4": ${jsonencode([
      for k in keys(internal_networks):
      {
        subnet = "${networks[k].network}/${networks[k].cidr}",
        pools = [
          {
            pool = "${networks[k].dhcp_pool}"
          }
        ]
      }
      if lookup(networks[k], "dhcp_pool", null) != null
    ])}
  }
}
EOF

pushd ${matchbox_assets_path}
curl -LO ${container_linux_base_url}/${container_linux_kernel}
curl -LO ${container_linux_base_url}/${container_linux_image}
popd

systemctl enable \
  libvirtd ksm ksmtuned \
  kea-dhcp4 matchbox

%end