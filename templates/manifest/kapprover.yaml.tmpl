apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubelet-approver
  namespace: kube-system

---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: kapprover-psp
  namespace: kube-system
spec:
  volumes: ['secret']
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubelet-approver
rules:
- apiGroups: ["certificates.k8s.io"]
  resources: ["certificatesigningrequests"]
  verbs: ["get", "list", "delete", "watch"]
- apiGroups: ["certificates.k8s.io"]
  resources: ["certificatesigningrequests/approval"]
  verbs: ["update"]
- apiGroups: ["certificates.k8s.io"]
  resources: ["signers"]
  resourceNames: ["kubernetes.io/kubelet-serving"]
  verbs: ["approve"]
- apiGroups: ["extensions"]
  resources: ["podsecuritypolicies"]
  verbs: ["use"]
  resourceNames: ["kapprover-psp"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: kubelet-approver
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubelet-approver
subjects:
- kind: ServiceAccount
  name: kubelet-approver
  namespace: kube-system

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: kubelet-approver
  namespace: kube-system
  labels:
    k8s-app: kubelet-approver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: kubelet-approver
  template:
    metadata:
      labels:
        k8s-app: kubelet-approver
    spec:
      priorityClassName: system-cluster-critical
      serviceAccountName: kubelet-approver
      containers:
      - name: kubelet-approver
        imagePullPolicy: Always
        image: ${container_images.kapprover}
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
          limits:
            cpu: 100m
            memory: 50Mi