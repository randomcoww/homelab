---
variant: fcos
version: ${ignition_version}
systemd:
  units:
    - name: nftables@${name}.service
      enabled: true
      dropins:
        - name: 20-kubelet-dependency.conf
          contents: |
            [Unit]
            WantedBy=kubelet.service
            Before=kubelet.service
    - name: bird.service
      enabled: true
      dropins:
        - name: 20-kubelet-dependency.conf
          contents: |
            [Unit]
            WantedBy=kubelet.service
            Before=kubelet.service

storage:
  files:
    - path: /etc/nftables/${name}.nft
      mode: 0644
      overwrite: true
      contents:
        inline: |
          table inet ${name} {
            chain mark-for-accept {
              meta mark set meta mark | ${fw_mark}
            }

            chain input {
              type filter hook input priority 0; policy accept;
              tcp dport ${ports.apiserver} jump mark-for-accept;
            }
          }
          ;
    # haproxy
    # failover apiserver from local to cluster
    - path: ${haproxy_path}/${name}.cfg
      mode: 0644
      contents:
        inline: |
          frontend ${name}
            bind :::${ports.apiserver} v4v6
            mode tcp
            default_backend ${name}

          backend ${name}
            option httpchk GET ${apiserver_health_endpoint} HTTP/1.0
            http-check expect status 200
            mode tcp
            balance leastconn
            default-server verify none check-ssl rise 2 fall 2 maxconn 5000 maxqueue 5000 weight 100
            server local 127.0.0.1:${ports.apiserver_backend} check
            server cluster ${cluster_apiserver_ip}:443 check
    # This is written by kube-vip but is needed by apiserver and kube-proxy befoer kube-vip is able to come up
    - path: /etc/systemd/network/20-lo.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=lo

          [Address]
          Address=${apiserver_ip}/32
          Scope=host
    - path: ${bird_path}/apiserver.conf
      mode: 0644
      contents:
        inline: |
          %{~ for host_key, netnum in bgp_neighbor_netnums ~}
          protocol bgp ${replace(host_key, "-", "_")} {
            debug all;
            local port ${bgp_port} as ${bgp_as};
            neighbor ${cidrhost(bgp_prefix, netnum)} port ${bgp_port} internal;
            direct;
            bfd {
            };
            ipv4 {
              import all;
              export all;
              table ${bird_cache_table_name};
            };
          }
          %{~ endfor ~}