---
variant: fcos
version: ${ignition_version}
systemd:
  units:
    - name: nftables-ip-gateway.service
      enabled: true
      contents: |
        [Unit]
        Wants=network-pre.target
        Before=network-pre.target

        [Service]
        Type=oneshot
        ProtectSystem=full
        ProtectHome=true
        ExecStart=/sbin/nft -f /etc/nftables/ip-gateway.nft
        ExecReload=/sbin/nft 'delete table ip gateway; include "/etc/nftables/ip-gateway.nft";'
        ExecStop=/sbin/nft delete table ip gateway
        RemainAfterExit=yes

        [Install]
        WantedBy=multi-user.target

storage:
  files:
    - path: /etc/sysctl.d/20-forward.conf
      mode: 0644
      contents:
        inline: |
          net.ipv4.ip_forward=1
    - path: /etc/nftables/ip-gateway.nft
      mode: 0644
      overwrite: true
      contents:
        inline: |
          table ip gateway {
            chain base-checks {
              ct state {established, related} accept;
              ct state invalid drop;
              ct status dnat accept;
              ip protocol icmp icmp type { echo-request, echo-reply, time-exceeded, parameter-problem, destination-unreachable } accept;
            }

            chain input {
              type filter hook input priority filter + 2; policy drop;
              jump base-checks;

              iifname lo accept;
              iifname != lo ip daddr 127.0.0.1/8 drop;

              %{~ for _, prefix in accept_prefixes ~}
              ip saddr ${prefix} accept;
              %{~ endfor ~}
              iifname != ${wan_interface_name} pkttype multicast accept;
            }

            chain forward {
              type filter hook forward priority filter + 2; policy drop;
              jump base-checks;

              %{~ for _, prefix in forward_prefixes ~}
              ip saddr ${prefix} accept;
              %{~ endfor ~}
            }

            chain prerouting {
              type nat hook prerouting priority dstnat; policy accept;
            }

            chain postrouting {
              type nat hook postrouting priority srcnat; policy accept;
              ip saddr ${lan_prefix} oifname ${wan_interface_name} masquerade;
            }
          }
          ;