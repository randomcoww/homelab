
kind: Deployment
apiVersion: apps/v1
metadata:
  name: s3-ingest
  namespace: common
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: s3-ingest
  template:
    metadata:
      labels:
        k8s-app: s3-ingest
    spec:
      dnsPolicy: ClusterFirstWithHostNet
      restartPolicy: Always
      containers:
      - name: rclone
        imagePullPolicy: IfNotPresent
        image: rclone/rclone:latest
        securityContext:
          privileged: true
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: minio-auth
              key: access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-auth
              key: secret_access_key
        args:
        - "mount"
        - ":s3:ingest-minio/"
        - "/vol"
        - "--s3-provider=Minio"
        - "--s3-env-auth=true"
        - "--s3-region="
        - "--s3-endpoint=http://minio.minio.svc:9000"
        - "--allow-other"
        - "--allow-non-empty"
        - "--vfs-cache-mode=minimal"
        - "--no-modtime"
        volumeMounts:
        - name: s3-ingest-vol
          mountPath: /vol
          mountPropagation: Bidirectional
      # Mount fuse in mnt under base path so that client container
      # can verify that it is mounted before starting
      volumes:
        - name: s3-ingest-vol
          hostPath:
            path: /var/lib/kubelet/hostpath/ingest/mnt

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: transmission-pvc
  namespace: common
spec:
  storageClassName: openebs-transmission
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 500G

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: s3-ingest-pv
  namespace: common
spec:
  storageClassName: s3-ingest
  capacity:
    storage: 50Ti
  accessModes:
  - ReadWriteOnce
  hostPath:
    path: /var/lib/kubelet/hostpath/ingest

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s3-ingest-pvc
  namespace: common
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: s3-ingest
  resources:
    requests:
      storage: 50Ti

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: transmission-config
  namespace: common
data:
  settings.json: |
    {
      "bind-address-ipv4": "0.0.0.0",
      "bind-address-ipv6": "::",
      "blocklist-enabled": true,
      "blocklist-url": "http://list.iblocklist.com/?list=ydxerpxkpcfqjaybcssw&fileformat=p2p&archiveformat=gz",
      "download-dir": "/vol/mnt/downloads",
      "download-queue-enabled": true,
      "download-queue-size": 20,
      "encryption": 2,
      "incomplete-dir": "/transmission/incomplete",
      "incomplete-dir-enabled": true,
      "max-peers-global": 1000,
      "message-level": 2,
      "peer-limit-global": 1000,
      "peer-limit-per-torrent": 1000,
      "port-forwarding-enabled": false,
      "preallocation": 0,
      "queue-stalled-enabled": true,
      "queue-stalled-minutes": 5,
      "ratio-limit": 0,
      "ratio-limit-enabled": true,
      "rename-partial-files": true,
      "rpc-authentication-required": false,
      "rpc-host-whitelist": "*.internal",
      "rpc-host-whitelist-enabled": true,
      "rpc-url": "/transmission/",
      "rpc-whitelist": "127.0.0.1",
      "rpc-whitelist-enabled": false,
      "script-torrent-done-enabled": true,
      "script-torrent-done-filename": "/remove-completed.sh",
      "speed-limit-down": 1000,
      "speed-limit-down-enabled": false,
      "speed-limit-up": 10,
      "speed-limit-up-enabled": true,
      "start-added-torrents": true
    }

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: transmission
  namespace: common
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: transmission
  template:
    metadata:
      labels:
        k8s-app: transmission
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - s3-ingest
            topologyKey: kubernetes.io/hostname
      dnsPolicy: ClusterFirstWithHostNet
      restartPolicy: Always
      initContainers:
      - name: wireguard
        image: randomcoww/wireguard:latest
        imagePullPolicy: Always
        args:
        - "up"
        - "wg0"
        securityContext:
          privileged: true
        volumeMounts:
        - name: wireguard-client
          mountPath: /etc/wireguard/wg0.conf
          subPath: wireguard-client
      containers:
      - name: transmission
        image: randomcoww/transmission:latest
        imagePullPolicy: Always
        env:
        - name: RESUME_DIR
          value: /transmission/resume
        - name: TORRENTS_DIR
          value: /vol/mnt/torrents
        ports:
        - containerPort: 9091
        volumeMounts:
        - name: transmission-resume
          mountPath: /transmission
        - name: transmission-config
          mountPath: /var/lib/transmission/settings.json
          subPath: settings.json
        - name: torrent-vol
          mountPath: "/vol"
        lifecycle:
          postStart:
            exec:
              # /vol/mnt should be fuse mounted by rclone
              # Kill the container if this is not mounted
              command: ["mountpoint", "-q", "/vol/mnt"]
      volumes:
      - name: transmission-config
        configMap:
          name: transmission-config
      - name: wireguard-client
        secret:
          secretName: wireguard-client
      - name: transmission-resume
        persistentVolumeClaim:
          claimName: transmission-pvc
      - name: torrent-vol
        persistentVolumeClaim:
          claimName: s3-ingest-pvc

---
kind: Service
apiVersion: v1
metadata:
  name: transmission
  namespace: common
spec:
  ports:
  - name: webui
    port: 80
    targetPort: 9091
  selector:
    k8s-app: transmission

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: transmission
  namespace: common
  annotations:
    kubernetes.io/ingress.class: traefik
    ingress.kubernetes.io/ssl-redirect: "true"
spec:
  rules:
  - host: tr.fuzzybunny.internal
    http:
      paths:
      - path: /
        backend:
          serviceName: transmission
          servicePort: webui
  tls:
  - secretName: tls-ingress