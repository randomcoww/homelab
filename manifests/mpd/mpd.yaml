apiVersion: v1
kind: ConfigMap
metadata:
  name: mpd-config
  namespace: common
data:
  mpd.conf: |
    user "mpd"
    bind_to_address "0.0.0.0"
    port "6600"

    music_directory "/mpd/music/mnt"
    playlist_directory "/mpd/cache/playlists"
    db_file "/mpd/cache/tag_cache"
    state_file "/mpd/cache/state"
    sticker_file "/mpd/cache/sticker.sql"
    filesystem_charset "UTF-8"

    audio_output {
      type "httpd"
      name "HTTP FLAC-3"
      encoder "flac"
      compression "3"
      port "8000"
      bind_to_address "0.0.0.0"
      max_clients "0"
    }

    audio_output {
      type "null"
      name "Null Output"
      mixer_type "none"
    }

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: mpd
  namespace: common
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: mpd
  template:
    metadata:
      labels:
        k8s-app: mpd
    spec:
      dnsPolicy: ClusterFirstWithHostNet
      restartPolicy: Always
      containers:
      - name: rclone
        image: randomcoww/rclone:v1.51.0
        securityContext:
          privileged: true
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: minio-auth
              key: access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-auth
              key: secret_access_key
        args:
        - "mount"
        - ":s3:music/"
        - "/vol/mnt"
        - "--s3-provider=Minio"
        - "--s3-env-auth=true"
        - "--s3-region="
        - "--s3-endpoint=http://minio.minio.svc:9000"
        - "--allow-other"
        - "--vfs-cache-mode=minimal"
        - "--no-modtime"
        - "--read-only"
        volumeMounts:
        - name: music-data
          mountPath: /vol/mnt
          subPath: mnt
          mountPropagation: Bidirectional
      - name: mpd
        image: randomcoww/mpd:0.21.23
        ports:
        - containerPort: 8000
          protocol: TCP
        - containerPort: 6600
          protocol: TCP
        volumeMounts:
        - mountPath: "/mpd/music"
          name: music-data
        - mountPath: "/mpd/cache"
          name: mpd-data
        - mountPath: /etc/mpd.conf
          name: mpd-config
          subPath: mpd.conf
        lifecycle:
          postStart:
            exec:
              # /mpd/music/mnt should be fuse mounted by rclone
              # Kill the container if this is not mounted
              command: ["mountpoint", "-q", "/mpd/music/mnt"]
      volumes:
      - name: mpd-data
        persistentVolumeClaim:
          claimName: mpd-pvc
      - name: mpd-config
        configMap:
          name: mpd-config
      # shared mountpoint for fuse mount
      - name: music-data
        emptyDir: {}

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mpd-pvc
  namespace: common
spec:
  storageClassName: openebs-mpd
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2G

---
kind: Service
apiVersion: v1
metadata:
  name: mpd
  namespace: common
  annotations:
    external-dns.alpha.kubernetes.io/hostname: mpd.fuzzybunny.internal
spec:
  type: LoadBalancer
  ports:
  - name: control
    port: 6600
    targetPort: 6600
  selector:
    k8s-app: mpd

---
kind: Service
apiVersion: v1
metadata:
  name: mpd-stream
  namespace: common
spec:
  ports:
  - name: stream
    port: 80
    targetPort: 8000
  selector:
    k8s-app: mpd

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: mpd-stream
  namespace: common
  annotations:
    kubernetes.io/ingress.class: traefik
    ingress.kubernetes.io/ssl-redirect: "true"
spec:
  rules:
  - host: stream.fuzzybunny.internal
    http:
      paths:
      - path: /
        backend:
          serviceName: mpd-stream
          servicePort: stream
  tls:
  - secretName: tls-ingress