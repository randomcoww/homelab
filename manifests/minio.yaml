apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: minio
spec:
  volumes: ['secret', 'hostPath']
  hostNetwork: true
  hostPorts:
  - min: 0
    max: 65535
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: minio-psp
rules:
- apiGroups: ["extensions"]
  resources: ["podsecuritypolicies"]
  verbs: ["use"]
  resourceNames: ["minio"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: minio-psp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: minio-psp
subjects:
- kind: ServiceAccount
  name: default
  namespace: minio

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: minio
  namespace: minio
spec:
  serviceName: minio
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: minio-data
                operator: Exists
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: minio
        env:
        - name: MINIO_CACHE_DRIVES
          value: /var/cache
        - name: MINIO_STORAGE_CLASS_STANDARD
          value: "EC:2"
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-auth
              key: access_key_id
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: minio-auth
              key: secret_access_key
        - name: INTERNAL_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        image: minio/minio:latest
        imagePullPolicy: Always
        args:
        - server
        - --address
        - :9000
        - http://$(INTERNAL_IP)/var/s3/0
        - http://$(INTERNAL_IP)/var/s3/1
        - http://$(INTERNAL_IP)/var/s3/2
        - http://$(INTERNAL_IP)/var/s3/3
        - http://$(INTERNAL_IP)/var/s3/4
        - http://$(INTERNAL_IP)/var/s3/5
        - http://$(INTERNAL_IP)/var/s3/6
        - http://$(INTERNAL_IP)/var/s3/7
        - http://$(INTERNAL_IP)/var/s3/8
        - http://$(INTERNAL_IP)/var/s3/9
        - http://$(INTERNAL_IP)/var/s3/10
        - http://$(INTERNAL_IP)/var/s3/11
        ports:
        - containerPort: 9000
        volumeMounts:
        - name: data
          mountPath: /var/s3
        - name: cache
          mountPath: /var/cache
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
          initialDelaySeconds: 120
          periodSeconds: 20
      volumes:
      - name: data
        hostPath:
          path: /var/s3
          type: DirectoryOrCreate
      - name: cache
        hostPath:
          path: /var/lib/kubelet/pv/cache
          type: DirectoryOrCreate

---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: minio
  labels:
    app: minio
spec:
  clusterIP: None
  ports:
  - port: 9000
    name: api
  selector:
    app: minio

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: minio
  namespace: minio
  annotations:
    kubernetes.io/ingress.class: traefik
    ingress.kubernetes.io/ssl-redirect: "true"
spec:
  rules:
  - host: minio.fuzzybunny.internal
    http:
      paths:
      - path: /
        backend:
          serviceName: minio
          servicePort: api
  tls:
  - secretName: tls-ingress