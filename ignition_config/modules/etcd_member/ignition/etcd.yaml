---
variant: fcos
version: 1.5.0
storage:
  files:
    - path: ${static_pod_manifest_path}/etcd-wrapper.yaml
      mode: 0644
      contents:
        inline: |
          ---
          kind: Pod
          apiVersion: v1
          metadata:
            namespace: kube-system
            name: etcd-wrapper
          spec:
            priorityClassName: system-node-critical
            priority: 2000001000
            hostNetwork: true
            restartPolicy: Always
            containers:
            - name: etcd-wrapper
              image: ${container_images.etcd_wrapper}
              args:
              # etcd args
              - --name=${name}
              - --trusted-ca-file=${pki.ca_cert.path}
              - --peer-trusted-ca-file=${pki.peer_ca_cert.path}
              - --cert-file=${pki.cert.path}
              - --key-file=${pki.key.path}
              - --peer-cert-file=${pki.peer_cert.path}
              - --peer-key-file=${pki.peer_key.path}
              - --initial-advertise-peer-urls=${initial_advertise_peer_urls}
              - --listen-peer-urls=${listen_peer_urls}
              - --advertise-client-urls=${advertise_client_urls}
              - --listen-client-urls=${listen_client_urls}
              - --initial-cluster-token=${cluster_token}
              - --initial-cluster=${initial_cluster}
              # pod manifest args
              - --etcd-image=${container_images.etcd}
              - --etcd-snaphot-file=${etcd_snapshot_file}
              - --etcd-pod-name=etcd
              - --etcd-pod-manifest-file=${etcd_pod_manifest_file}
              # etcd-wrapper args
              - --client-cert-file=${pki.client_cert.path}
              - --client-key-file=${pki.client_key.path}
              - --initial-cluster-clients=${initial_cluster_clients}
              - --s3-backup-resource=${s3_resource}
              - --healthcheck-interval=${healthcheck_interval}
              - --healthcheck-fail-count-allowed=${healthcheck_fail_count_allowed}
              - --backup-interval=${backup_interval}
              env:
              - name: NODE_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: spec.nodeName
              - name: AWS_ACCESS_KEY_ID
                value: "${access_key_id}"
              - name: AWS_SECRET_ACCESS_KEY
                value: "${secret_access_key}"
              - name: AWS_SDK_LOAD_CONFIG
                value: "1"
              volumeMounts:
              - name: certs-volume
                mountPath: ${pki_path}
                readOnly: true
              - name: backup-volume
                mountPath: ${dirname(etcd_snapshot_file)}
              - name: manifest-volume
                mountPath: ${dirname(etcd_pod_manifest_file)}
            volumes:
            - name: certs-volume
              hostPath:
                path: ${pki_path}
            - name: backup-volume
              hostPath:
                path: ${dirname(etcd_snapshot_file)}
                DirectoryOrCreate: true
            - name: manifest-volume
              hostPath:
                path: ${dirname(etcd_pod_manifest_file)}

    # certs #
    %{~ for cert in values(pki) ~}
    - path: ${cert.path}
      mode: 0600
      contents:
        inline: "${replace(cert.content, "\n", "\\n")}"
    %{~ endfor ~}