---
variant: fcos
version: 1.5.0
systemd:
  units:
    - name: nftables.service
      enabled: true
      dropins:
        - name: 10-namespace.conf
          contents: |
            [Service]
            ExecReload=
            ExecStop=
            ExecReload=/sbin/nft 'delete table ${nftables_name}; include "/etc/sysconfig/nftables.conf";'
            ExecStop=/sbin/nft delete table ${nftables_name}

storage:
  files:
    - path: /etc/sysconfig/nftables.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          table ip ${nftables_name} {
            chain base_checks {
              ct state {established, related} accept;
              ct state invalid drop;
              ip protocol icmp icmp type { echo-request, echo-reply, time-exceeded, parameter-problem, destination-unreachable } accept;
            }

            chain input {
              type filter hook input priority filter; policy drop;
              jump base_checks;

              iifname lo accept;
              iifname != lo ip daddr 127.0.0.1/8 drop;

              ip saddr ${interfaces.etcd.prefix} accept;
              ip saddr ${interfaces.sync.prefix} accept;
              ip saddr ${interfaces.kubernetes.prefix} accept;
              ip saddr ${interfaces.lan.prefix} accept;
              ip saddr ${pod_network_prefix} accept;
              iifname ${interfaces.wan.interface_name} ct status dnat accept;
              iifname != ${interfaces.wan.interface_name} udp sport bootps udp dport bootpc accept;
              iifname != ${interfaces.wan.interface_name} pkttype multicast accept;
            }

            chain forward {
              type filter hook forward priority filter; policy drop;
              jump base_checks;
              ip saddr ${interfaces.kubernetes.prefix} accept;
              ip saddr ${pod_network_prefix} accept;
              ip saddr ${interfaces.lan.prefix} accept;
              ct status dnat accept;
            }

            chain prerouting {
              type nat hook prerouting priority dstnat; policy accept;
              iifname ${interfaces.wan.interface_name} tcp dport http dnat to ${external_ingress_ip};
            }

            chain postrouting {
              type nat hook postrouting priority srcnat; policy accept;
              %{~ for _, interface in interfaces ~}
              %{~ if lookup(interface, "enable_gateway", false) ~}
              ip saddr ${interface.prefix} oifname ${interfaces.wan.interface_name} masquerade;
              %{~ endif ~}
              %{~ endfor ~}
            }
          }
          ;