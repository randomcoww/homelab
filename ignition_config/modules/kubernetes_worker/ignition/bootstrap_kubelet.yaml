---
variant: fcos
version: 1.5.0
systemd:
  units:
    - name: crio.service
      enabled: true
    - name: kubelet.service
      enabled: true
      dropins:
        - name: 20-bootstrap-worker.conf
          contents: |
            [Unit]
            ConditionKernelCommandLine=coreos.live.rootfs_url

            [Service]
            ExecStartPre=/usr/bin/mkdir -p \
              ${kubelet_root_path}
            ExecStart=
            ExecStart=/usr/bin/kubelet \
              $KUBELET_COMMON_ARGS \
              --root-dir=${kubelet_root_path} \
              --bootstrap-kubeconfig=${config_path}/bootstrap.kubeconfig \
              --cert-dir=${pki_path} \
              --config=${config_path}/kubelet-config-bootstrap-worker.yaml \
              --kubeconfig=${config_path}/kubelet.kubeconfig \
              --node-labels=${join(",", [
                for node_label, value in node_labels :
                "${node_label}=${value}"
              ])}

storage:
  files:
    # nf_call_iptables disabled gloablly except for CNI #
    - path: /etc/udev/rules.d/10-cni-nf-call-iptables.rules
      mode: 0644
      contents:
        inline: |
          SUBSYSTEM=="net", ACTION=="add", KERNEL=="${cni_bridge_interface_name}", ATTR{bridge/nf_call_iptables}="1"
    - path: /etc/crio/crio.conf.d/20-storage.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [crio]
          root="${container_storage_path}"

          [crio.image]
          big_files_temporary_dir="${container_storage_path}"
    - path: /etc/containers/storage.conf.d/10-root.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          [storage]
          graphroot="${container_storage_path}"

    - path: ${config_path}/kubelet-config-bootstrap-worker.yaml
      mode: 0644
      contents:
        inline: |
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          containerRuntimeEndpoint: unix:///run/crio/crio.sock
          cgroupDriver: systemd
          cgroupsPerQOS: false
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: true
            x509:
              clientCAFile: ${pki.ca_cert.path}
          authorization:
            mode: Webhook
          address: 0.0.0.0
          port: ${kubelet_port}
          staticPodPath: ${static_pod_manifest_path}
          clusterDomain: ${cluster_domain}
          clusterDNS:
          - ${cluster_dns_ip}
          imageGCHighThresholdPercent: 1
          imageGCLowThresholdPercent: 0
          imageMinimumGCAge: 1h
          resolvConf: /run/systemd/resolve/resolv.conf
          runtimeRequestTimeout: 15m
          rotateCertificates: true
          serverTLSBootstrap: true
          shutdownGracePeriodByPodPriority:
          - priority: 0
            shutdownGracePeriodSeconds: 180
          containerLogMaxSize: 10Mi
          containerLogMaxFiles: 2
          evictionHard:
            imagefs.available: 1%
            memory.available: 100Mi
            nodefs.available: 1%
            nodefs.inodesFree: 1%
          registerNode: true
          failSwapOn: false
          enforceNodeAllocatable: []
          %{~ if length(node_taints) > 0 ~}
          ${indent(10, yamlencode({registerWithTaints = node_taints}))}
          %{~ endif ~}

    - path: ${config_path}/bootstrap.kubeconfig
      mode: 0644
      contents:
        inline: |
          kind: Config
          apiVersion: v1
          clusters:
          - cluster:
              certificate-authority-data: ${replace(base64encode(chomp(pki.ca_cert.content)), "\n", "")}
              server: ${apiserver_endpoint}
            name: ${cluster_name}
          contexts:
          - context:
              cluster: ${cluster_name}
              user: kubelet-bootstrap
            name: default
          current-context: default
          preferences: {}
          users:
          - name: kubelet-bootstrap
            user:
              client-certificate-data: ${replace(base64encode(chomp(pki.bootstrap_cert.content)), "\n", "")}
              client-key-data: ${replace(base64encode(chomp(pki.bootstrap_key.content)), "\n", "")}
    # mayastor hugepages #
    - path: /etc/sysctl.d/20-hugepages.conf
      mode: 0644
      contents:
        inline: |
          vm.nr_hugepages=1024
    # mayastor #
    - path: /etc/modules-load.d/20-nvme-tcp.conf
      mode: 0644
      contents:
        inline: |
          nvme_tcp

    # pki #
    %{~ for cert in values(pki) ~}
    - path: ${cert.path}
      mode: 0644
      contents:
        inline: "${replace(cert.content, "\n", "\\n")}"
    %{~ endfor ~}