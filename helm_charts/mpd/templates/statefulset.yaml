apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "mpd.fullname" . }}
  labels:
    app: {{ template "mpd.name" . }}
    chart: {{ template "mpd.chart" . }}
    release: "{{ .Release.Name }}"
spec:
  serviceName: {{ template "mpd.fullname" . }}
  # Needs common database - only works with 1 replica
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "mpd.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "mpd.name" . }}
        release: {{ .Release.Name }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
    spec:
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      restartPolicy: Always
      initContainers:
      - name: {{ .Chart.Name }}-init
        image: {{ .Values.images.mpd }}
        command:
        - sh
        - -c
        - |
          mkdir -p {{ .Values.mpdCachePath }}/playlists && \
          touch \
            {{ .Values.mpdCachePath }}/tag_cache \
            {{ .Values.mpdCachePath }}/state \
            {{ .Values.mpdCachePath }}/sticker.sql
        volumeMounts:
        - name: mpd-cache
          mountPath: {{ .Values.mpdCachePath }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.images.mpd }}
        args: ["--stdout", "/etc/mpd.conf"]
        volumeMounts:
        - name: mpd-config
          mountPath: /etc/mpd.conf
          subPath: mpd.conf
        - name: mpd-cache
          mountPath: {{ .Values.mpdCachePath }}
        ports:
        {{- range $audioOutput := .Values.audioOutputs }}
        - containerPort: {{ $audioOutput.port }}
        {{- end }}
      - name: {{ .Chart.Name }}-mympd
        image: {{ .Values.images.mympd }}
        ports:
        - containerPort: {{ .Values.ports.mympd }}
      - name: {{ .Chart.Name }}-rclone
        image: {{ .Values.images.rclone }}
        args:
        - "serve"
        - "webdav"
        - "--addr=127.0.0.1:{{ .Values.ports.rclone }}"
        - ":s3:{{ .Values.minioBucket }}"
        - "--s3-provider=Minio"
        - "--s3-endpoint={{ .Values.minioEndPoint }}"
        - "--no-modtime"
        - "--read-only"
      volumes:
      - name: mpd-config
        secret:
          secretName: {{ template "mpd.fullname" . }}
  volumeClaimTemplates:
  - metadata:
      name: mpd-cache
    {{- if .Values.persistence.annotations }}
      annotations:
{{ toYaml .Values.persistence.annotations | trimSuffix "\n" | indent 8 }}
    {{- end }}
    spec:
      accessModes:
      - {{ .Values.persistence.accessMode | quote }}
      resources:
        requests:
          storage: {{ .Values.persistence.size | quote }}
    {{- if .Values.persistence.storageClass }}
      storageClassName: "{{ .Values.persistence.storageClass }}"
    {{- end }}