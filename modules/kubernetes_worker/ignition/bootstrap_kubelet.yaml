---
variant: fcos
version: 1.4.0
systemd:
  units:
    - name: crio.service
      enabled: true
      dropins:
        - name: 10-worker.conf
          contents: |
            [Service]
            ExecStartPre=/usr/bin/rm -f \
              /etc/cni/net.d/100-crio-bridge.conf \
              /etc/cni/net.d/200-loopback.conf
    - name: kubelet.service
      enabled: true
      dropins:
        - name: 20-bootstrap-worker.conf
          contents: |
            [Service]
            ExecStartPre=/usr/bin/mkdir -p \
              ${kubelet_root_path}
            ExecStart=
            ExecStart=/usr/bin/kubelet \
              $KUBELET_COMMON_ARGS \
              --root-dir=${kubelet_root_path} \
              --bootstrap-kubeconfig=${config_path}/bootstrap.kubeconfig \
              --cert-dir=${certs_path} \
              --config=${config_path}/kubelet-config-bootstrap-worker.yaml \
              --feature-gates=GracefulNodeShutdown=true \
              --kubeconfig=${config_path}/kubelet.kubeconfig \
              --network-plugin=cni \
              --register-node=true \
              --register-with-taints=${join(",", [
                for taint, value in register_with_taints :
                "${taint}=${value}"
              ])} \
              --node-labels=${join(",", [
                for node_label, value in node_labels :
                "${node_label}=${value}"
              ])}

storage:
  files:
    # nf_call_iptables disabled gloablly except for CNI
    - path: /etc/udev/rules.d/10-cni-nf-call-iptables.rules
      mode: 0644
      contents:
        inline: |
          SUBSYSTEM=="net", ACTION=="add", KERNEL=="${cni_bridge_interface_name}", ATTR{bridge/nf_call_iptables}="1"

    - path: /etc/crio/crio.conf.d/20-storage.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |-
          [crio]
          root="${container_storage_path}"

          [crio.image]
          big_files_temporary_dir="${container_storage_path}"
    - path: ${config_path}/kubelet-config-bootstrap-worker.yaml
      mode: 0644
      contents:
        inline: |-
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: true
            x509:
              clientCAFile: "${certs.ca_cert.path}"
          authorization:
            mode: Webhook
          address: 0.0.0.0
          port: ${ports.kubelet}
          staticPodPath: ${static_pod_manifest_path}
          clusterDomain: "${cluster_domain}"
          clusterDNS:
          - "${service_network.vips.dns}"
          resolvConf: "/run/systemd/resolve/resolv.conf"
          runtimeRequestTimeout: "15m"
          rotateCertificates: true
          serverTLSBootstrap: true
          shutdownGracePeriod: "120s"
          shutdownGracePeriodCriticalPods: "60s"
          containerLogMaxSize: "10Mi"
          containerLogMaxFiles: 2
          evictionHard:
            imagefs.available: 1%
            memory.available: 100Mi
            nodefs.available: 1%
            nodefs.inodesFree: 1%

    - path: ${config_path}/bootstrap.kubeconfig
      mode: 0644
      contents:
        inline: |-
          kind: Config
          apiVersion: v1
          clusters:
          - cluster:
              certificate-authority: ${certs.ca_cert.path}
              server: https://${apiserver_vip}:${apiserver_port}
            name: ${cluster_name}
          contexts:
          - context:
              cluster: ${cluster_name}
              user: kubelet-bootstrap
            name: default
          current-context: default
          preferences: {}
          users:
          - name: kubelet-bootstrap
            user:
              client-certificate: ${certs.bootstrap_cert.path}
              client-key: ${certs.bootstrap_key.path}

    # certs #
    %{~ for cert in values(certs) ~}
    - path: ${cert.path}
      mode: 0644
      contents:
        inline: "${replace(cert.content, "\n", "\\n")}"
    %{~ endfor ~}