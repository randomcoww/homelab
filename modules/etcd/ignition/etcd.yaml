---
variant: fcos
version: 1.4.0
storage:
  files:
    - path: ${static_pod_manifest_path}/etcd-wrapper.yaml
      mode: 0644
      contents:
        inline: |-
          ---
          kind: Pod
          apiVersion: v1
          metadata:
            namespace: kube-system
            name: etcd-wrapper
          spec:
            hostNetwork: true
            restartPolicy: Always
            containers:
            - name: etcd-wrapper
              image: ${container_images.etcd_wrapper}
              args:
              - "--name=${hostname}"
              - "--host-cert-file=${etcd_certs.server_cert.path}"
              - "--host-key-file=${etcd_certs.server_key.path}"
              - "--host-trusted-ca-file=${etcd_certs.ca_cert.path}"
              - "--host-peer-cert-file=${etcd_certs.server_cert.path}"
              - "--host-peer-key-file=${etcd_certs.server_key.path}"
              - "--host-peer-trusted-ca-file=${etcd_certs.ca_cert.path}"
              - "--initial-advertise-peer-urls=https://${cidrhost(network_prefix, host_netnum)}:${etcd_peer_port}"
              - "--listen-peer-urls=https://${cidrhost(network_prefix, host_netnum)}:${etcd_peer_port}"
              - "--listen-client-urls=https://127.0.0.1:${etcd_client_port},https://${cidrhost(network_prefix, host_netnum)}:${etcd_client_port}"
              - "--advertise-client-urls=https://${cidrhost(network_prefix, host_netnum)}:${etcd_client_port}"
              - "--initial-cluster-token=${etcd_cluster_token}"
              - "--initial-cluster=${join(",", [
                  for etcd_host in etcd_hosts :
                  "${etcd_host.name}=https://${cidrhost(network_prefix, etcd_host.netnum)}:${etcd_peer_port}"
              ])}"
              - "--etcd-servers=${join(",", [
                  for etcd_host in etcd_hosts :
                  "https://${cidrhost(network_prefix, etcd_host.netnum)}:${etcd_client_port}"
              ])}"
              - "--host-backup-file=${backup_path}/etcd.db"
              - "--host-etcd-manifest-file=${static_pod_manifest_path}/${etcd_pod_manifest_name}"
              - "--etcd-image=${container_images.etcd}"
              - "--client-cert-file=${etcd_certs.client_cert.path}"
              - "--client-key-file=${etcd_certs.client_key.path}"
              - "--s3-backup-path=${etcd_s3_backup_path}"
              - "--backup-interval=30m"
              - "--healthcheck-interval=10s"
              - "--pod-update-interval=1m"
              env:
              - name: AWS_ACCESS_KEY_ID
                value: "${aws_access_key_id}"
              - name: AWS_SECRET_ACCESS_KEY
                value: "${aws_secret_access_key}"
              - name: AWS_DEFAULT_REGION
                value: "${aws_region}"
              - name: AWS_SDK_LOAD_CONFIG
                value: "1"
              volumeMounts:
              - name: certs-volume
                mountPath: "${certs_path}"
                readOnly: true
              - name: backup-volume
                mountPath: "${backup_path}"
              - name: manifest-volume
                mountPath: "${static_pod_manifest_path}/${etcd_pod_manifest_name}"
            volumes:
            - name: certs-volume
              hostPath:
                path: "${certs_path}"
            - name: backup-volume
              hostPath:
                path: "${backup_path}"
            - name: manifest-volume
              hostPath:
                type: FileOrCreate
                path: "${static_pod_manifest_path}/${etcd_pod_manifest_name}"

    # certs #
    %{~ for cert in values(etcd_certs) ~}
    - path: ${cert.path}
      mode: 0644
      contents:
        inline: "${replace(cert.content, "\n", "\\n")}"
    %{~ endfor ~}