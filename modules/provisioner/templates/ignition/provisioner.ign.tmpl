---
networkd:
  units:
    - name: {{.store_if}}.network
      contents: |
        [Match]
        Name={{.store_if}}

        [Network]
        LinkLocalAddressing=no
        DHCP=no

        [Address]
        Address={{.store_ip}}/{{.store_netmask}}

    - name: {{.lan_if}}.network
      contents: |
        [Match]
        Name={{.lan_if}}

        [Network]
        LinkLocalAddressing=no
        DHCP=no

        [Address]
        Address={{.lan_ip}}/{{.lan_netmask}}

    - name: {{.sync_if}}.network
      contents: |
        [Match]
        Name={{.sync_if}}

        [Network]
        LinkLocalAddressing=no
        DHCP=no

        [Address]
        Address={{.sync_ip}}/{{.sync_netmask}}

    - name: {{.wan_if}}.network
      contents: |
        [Match]
        Name={{.wan_if}}

        [Network]
        LinkLocalAddressing=no
        DHCP=yes
        DNS={{.public_dns_ip}}
        DNSOverTLS=opportunistic
        Domains=~

        [DHCP]
        UseMTU=true
        UseDNS=false
        UseNTP=false
        SendHostname=false
        UseHostname=false
        UseDomains=false
        UseTimezone=no

    - name: {{.vwan_if}}.network
      contents: |
        [Match]
        Name={{.vwan_if}}

        [Network]
        LinkLocalAddressing=no
        DHCP=yes

        [DHCP]
        UseMTU=true
        UseDNS=false
        UseNTP=false
        SendHostname=false
        UseHostname=false
        UseDomains=false
        UseTimezone=no
        RouteTable=250

systemd:
  units:
    - name: docker.service
      mask: true
    - name: docker.socket
      mask: true
    - name: containerd.service
      enabled: true
      dropins:
        - name: containerd.conf
          contents: |
            [Service]
            ExecStart=
            ExecStart=/usr/bin/env PATH=${TORCX_BINDIR}:${PATH} ${TORCX_BINDIR}/containerd
            OOMScoreAdjust=-999
    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubelet via Hyperkube ACI
        After=containerd.service
        Requires=containerd.service

        [Service]
        Environment="KUBELET_IMAGE=docker://{{.hyperkube_image}}"
        Environment="RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \
          --volume=resolv,kind=host,source=/etc/resolv.conf \
          --mount volume=resolv,target=/etc/resolv.conf \
          --insecure-options=image"
        ExecStartPre=/bin/mkdir -p /var/log/containers
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --config={{.kubelet_path}}/kubelet-config.yaml \
          --node-ip={{.sync_ip}} \
          --register-node=false \
          --pod-manifest-path={{.kubelet_path}}/manifests \
          --container-runtime=remote \
          --container-runtime-endpoint=unix:///run/containerd/containerd.sock
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid
        Restart=always
        RestartSec=5

        [Install]
        WantedBy=multi-user.target

storage:
  files:
    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline:
          {{.hostname}}
    - path: /etc/sysctl.d/ipforward.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          net.ipv4.ip_forward=1
          net.ipv4.ip_nonlocal_bind=1
    - path: /etc/sysctl.d/max-user-watches.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          fs.inotify.max_user_watches=16184

    - path: {{.certs_path}}/ca.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_ca}}"
    - path: {{.certs_path}}/matchbox.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_matchbox}}"
    - path: {{.certs_path}}/matchbox-key.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_matchbox_key}}"
    - path: {{.certs_path}}/syncthing.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_syncthing}}"
    - path: {{.certs_path}}/syncthing-key.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_syncthing_key}}"

    - path: {{.kubelet_path}}/kubelet-config.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            anonymous:
              enabled: true
            webhook:
              enabled: false
          authorization:
            mode: AlwaysAllow
          StaticPodPath: {{.kubelet_path}}/manifests
          makeIPTablesUtilChains: false

    - path: {{.kubelet_path}}/manifests/nftables.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            name: nftables
          spec:
            restartPolicy: OnFailure
            hostNetwork: true
            containers:
            - name: nftables
              image: {{.nftables_image}}
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
              env:
              - name: NFTABLES_LOCAL_CONFIG
                value: |
                  define if_internal = { {{.lan_if}}, {{.store_if}} }
                  define if_external = {{.vwan_if}}
                  define if_trusted = {{.store_if}}
                  define if_sync = {{.sync_if}}

                  table ip filter {
                    chain base_checks {
                      ct state {established, related} accept;
                      ct state invalid drop;
                    }

                    chain input {
                      type filter hook input priority 0; policy drop;

                      jump base_checks;

                      iifname "lo" accept;
                      iifname != "lo" ip daddr 127.0.0.1/8 drop;

                      ip protocol icmp icmp type { echo-request, echo-reply, time-exceeded, parameter-problem, destination-unreachable } accept;

                      iifname $if_trusted accept;
                      iifname $if_sync accept;

                      iifname $if_internal tcp dport domain accept;
                      iifname $if_internal udp dport domain accept;
                      iifname $if_internal udp sport bootps udp dport bootpc accept;
                      iifname $if_internal pkttype multicast accept;
                    }

                    chain forward {
                      type filter hook forward priority 0; policy drop;

                      jump base_checks;

                      ip protocol icmp icmp type { echo-request, echo-reply, time-exceeded, parameter-problem, destination-unreachable } accept;

                      iifname $if_trusted accept;
                      iifname $if_internal oifname $if_external accept;

                      iifname $if_internal ip daddr {{.metallb_ip_range}} accept;
                    }

                    chain output {
                      type filter hook output priority 100; policy accept;
                    }
                  }

                  table ip nat {
                    chain prerouting {
                      type nat hook prerouting priority 0; policy accept;
                    }

                    chain input {
                      type nat hook input priority 0; policy accept;
                    }

                    chain output {
                      type nat hook output priority 0; policy accept;
                    }

                    chain postrouting {
                      type nat hook postrouting priority 100; policy accept;
                      oifname $if_external masquerade;
                    }
                  }
                  ;

    - path: {{.kubelet_path}}/manifests/kea.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            name: kea
          spec:
            restartPolicy: Always
            hostNetwork: true
            containers:
            - name: kea-control-agent
              image: {{.kea_image}}
              args:
              - kea-ctrl-agent
              env:
              - name: KEA_LOCAL_CONFIG
                value: |-
                  {
                    "Control-agent": {
                      "http-host": "0.0.0.0",
                      "http-port": {{.kea_peer_port}},
                      "control-sockets": {
                        "dhcp4": {
                          "socket-type": "unix",
                          "socket-name": "{{.kea_path}}/kea-dhcp4-ctrl.sock"
                        }
                      }
                    }
                  }
              volumeMounts:
              - name: kea-path
                mountPath: "{{.kea_path}}"
                readOnly: false
            - name: kea-dhcp4
              image: {{.kea_image}}
              args:
              - kea-dhcp4
              env:
              - name: NODE_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: spec.nodeName
              - name: KEA_LOCAL_CONFIG
                value: |-
                  {
                    "Dhcp4": {
                      "valid-lifetime": 1200,
                      "renew-timer": 1200,
                      "rebind-timer": 1200,
                      "interfaces-config": {
                        "interfaces": [
                          "*"
                        ]
                      },
                      "control-socket": {
                        "socket-type": "unix",
                        "socket-name": "{{.kea_path}}/kea-dhcp4-ctrl.sock"
                      },
                      "lease-database": {
                        "type": "memfile",
                        "name": "{{.kea_path}}/dhcp4.leases",
                        "persist": true
                      },
                      "option-data": [
                        {
                          "name": "domain-name",
                          "data": "{{.internal_domain}}"
                        }
                      ],
                      "client-classes": [
                        {
                          "name": "ipxe_detected",
                          "test": "substring(option[77].hex,0,4) == 'iPXE'",
                          "boot-file-name": "http://{{.matchbox_vip}}:{{.matchbox_http_port}}/boot.ipxe"
                        },
                        {
                          "name": "ipxe",
                          "test": "not(substring(option[77].hex,0,4) == 'iPXE') and (option[93].hex == 0x0000)",
                          "next-server": "{{.store_gateway_vip}}",
                          "boot-file-name": "/undionly.kpxe"
                        },
                        {
                          "name": "ipxe_efi",
                          "test": "not(substring(option[77].hex,0,4) == 'iPXE') and (option[93].hex == 0x0007)",
                          "next-server": "{{.store_gateway_vip}}",
                          "boot-file-name": "/ipxe.efi"
                        }
                      ],
                      "hooks-libraries": [
                        {
                          "library": "/usr/lib/hooks/libdhcp_lease_cmds.so",
                          "parameters": {}
                        },
                        {
                          "library": "/usr/lib/hooks/libdhcp_ha.so",
                          "parameters": {
                            "high-availability": [
                              {
                                "this-server-name": "$(NODE_NAME)",
                                "mode": "hot-standby",
                                "max-unacked-clients": 0,
                                "peers": [
                                  {{.kea_ha_peers}}
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "subnet4": [
                        {
                          "subnet": "{{.lan_ip_range}}",
                          "option-data": [
                            {
                              "name": "routers",
                              "data": "{{.lan_gateway_vip}}"
                            },
                            {
                              "name": "domain-name-servers",
                              "data": "{{.recursive_dns_vip}}",
                              "csv-format": true
                            }
                          ],
                          "pools": [
                            {
                              "pool": "{{.lan_dhcp_ip_range}}"
                            }
                          ]
                        },
                        {
                          "subnet": "{{.store_ip_range}}",
                          "option-data": [
                            {
                              "name": "routers",
                              "data": "{{.store_gateway_vip}}"
                            },
                            {
                              "name": "domain-name-servers",
                              "data": "{{.recursive_dns_vip}}",
                              "csv-format": true
                            },
                            {
                              "name": "interface-mtu",
                              "data": "{{.mtu}}"
                            }
                          ],
                          "pools": [
                            {
                              "pool": "{{.store_dhcp_ip_range}}"
                            }
                          ]
                        }
                      ],
                      "dhcp-ddns": {
                        "enable-updates": true,
                        "qualifying-suffix": "{{.internal_domain}}.",
                        "override-client-update": true,
                        "override-no-update": true,
                        "replace-client-name": "when-not-present"
                      }
                    }
                  }
              volumeMounts:
              - name: kea-path
                mountPath: "{{.kea_path}}"
                readOnly: false
            volumes:
            - name: kea-path
              emptyDir: {}

    - path: {{.kubelet_path}}/manifests/unbound.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            namespace: kube-system
            name: unbound
          spec:
            restartPolicy: Always
            hostNetwork: true
            containers:
            - name: unbound
              image: {{.unbound_image}}
              env:
              - name: UNBOUND_LOCAL_CONFIG
                value: |-
                  server:
                    interface-automatic: yes
                    port: 53
                    interface: 0.0.0.0
                    num-threads: 2
                    do-ip6: no
                    do-udp: yes
                    do-tcp: yes
                    access-control: 0.0.0.0/0 allow
                    do-not-query-localhost: no
                  private-domain: "{{.internal_domain}}"
                  domain-insecure: "{{.internal_domain}}"
                  unblock-lan-zones: yes
                  insecure-lan-zones: yes
                  stub-zone:
                    name: "{{.internal_domain}}"
                    stub-addr: {{.internal_dns_vip}}
                  forward-zone:
                    name: "."
                    forward-tls-upstream: yes
                    forward-addr: {{.public_dns_ip}}@853
                  remote-control:
                    control-enable: no

    - path: {{.kubelet_path}}/manifests/keepalived.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            namespace: kube-system
            name: keepalived
          spec:
            restartPolicy: Always
            hostNetwork: true
            containers:
            - name: keepalived
              image: {{.keepalived_image}}
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
              args:
              - "-P"
              env:
              - name: KEEPALIVED_LOCAL_CONFIG
                value: |-
                  global_defs {
                    vrrp_version 3
                    vrrp_iptables
                    dynamic_interfaces
                  }
                  vrrp_instance VI_gateway {
                    nopreempt
                    state BACKUP
                    strict_mode off
                    virtual_router_id 247
                    interface {{.store_if}}
                    priority 100
                    virtual_ipaddress {
                      {{.store_gateway_vip}} dev {{.store_if}}
                      {{.recursive_dns_vip}} dev {{.store_if}}
                      {{.matchbox_vip}} dev {{.store_if}}
                      {{.lan_gateway_vip}} dev {{.lan_if}}
                    }
                    virtual_rules {
                      to {{.store_ip_range}} lookup main priority 32758
                      to {{.lan_ip_range}} lookup main priority 32758
                      iif {{.store_if}} lookup 250 priority 32760
                      iif {{.lan_if}} lookup 250 priority 32760
                    }
                  }

    - path: {{.kubelet_path}}/manifests/tftp.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            name: kea-tftp
          spec:
            restartPolicy: Always
            hostNetwork: true
            containers:
            - name: tftpd-ipxe
              image: {{.tftpd_image}}

    - path: {{.kubelet_path}}/manifests/matchbox.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            name: matchbox
          spec:
            hostNetwork: true
            containers:
            - name: matchbox
              image: {{.matchbox_image}}
              args:
              - "-address=0.0.0.0:{{.matchbox_http_port}}"
              - "-rpc-address=0.0.0.0:{{.matchbox_rpc_port}}"
              - "-ca-file={{.certs_path}}/ca.pem"
              - "-cert-file={{.certs_path}}/matchbox.pem"
              - "-key-file={{.certs_path}}/matchbox-key.pem"
              - "-data-path={{.matchbox_path}}"
              - "-assets-path="
              volumeMounts:
              - mountPath: "{{.certs_path}}"
                name: certs-path
                readOnly: true
              - mountPath: "{{.matchbox_path}}"
                name: matchbox-data
                readOnly: false
            - name: syncthing
              image: {{.syncthing_image}}
              env:
              - name: NODE_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.hostIP
              - name: CERT_PATH
                value: {{.certs_path}}/syncthing.pem
              - name: KEY_PATH
                value: {{.certs_path}}/syncthing-key.pem
              - name: SYNCTHING_LOCAL_CONFIG
                value: |-
                  <configuration>
                    <folder id="matchbox" label="matchbox" path="{{.matchbox_path}}" type="sendreceive" fsWatcherEnabled="true" fsWatcherDelayS="1" rescanIntervalS="10" autoNormalize="false">
                      {{.syncthing_folder_devices}}
                      <maxConflicts>1</maxConflicts>
                    </folder>
                    {{.syncthing_devices}}
                    <gui enabled="false"/>
                    <options>
                      <listenAddress>$(NODE_IP):{{.syncthing_peer_port}}</listenAddress>
                      <globalAnnounceEnabled>false</globalAnnounceEnabled>
                      <localAnnounceEnabled>false</localAnnounceEnabled>
                      <reconnectionIntervalS>5</reconnectionIntervalS>
                      <relaysEnabled>false</relaysEnabled>
                      <startBrowser>false</startBrowser>
                      <natEnabled>false</natEnabled>
                      <urAccepted>-1</urAccepted>
                      <autoUpgradeIntervalH>0</autoUpgradeIntervalH>
                      <defaultFolderPath></defaultFolderPath>
                    </options>
                  </configuration>
              volumeMounts:
              - mountPath: "{{.certs_path}}"
                name: certs-path
                readOnly: true
              - mountPath: "{{.matchbox_path}}"
                name: matchbox-data
                readOnly: false
            volumes:
            - name: certs-path
              hostPath:
                path: "{{.certs_path}}"
            - name: matchbox-data
              emptyDir: {}

    - path: {{.kubelet_path}}/manifests/conntrackd.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            namespace: kube-system
            name: conntrackd
          spec:
            restartPolicy: Always
            hostNetwork: true
            containers:
            - name: conntrackd
              image: {{.conntrack_image}}
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
                  - SYS_NICE
              env:
              - name: NODE_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.hostIP
              - name: CONNTRACKD_LOCAL_CONFIG
                value: |-
                  Sync {
                    Mode FTFW {
                      # StartupResync on
                      DisableExternalCache on
                    }

                    Multicast {
                      IPv4_address 225.0.0.50
                      Group 3780
                      IPv4_interface $(NODE_IP)
                      Interface {{.sync_if}}
                      SndSocketBuffer 24985600
                      RcvSocketBuffer 24985600
                      Checksum on
                    }

                    Options {
                      TCPWindowTracking on
                      ExpectationSync on
                    }
                  }

                  General {
                    LogFile /dev/stdout
                    HashSize 32768
                    HashLimit 131072
                    NetlinkBufferSize 2097152
                    NetlinkBufferSizeMaxGrowth 8388608
                    NetlinkEventsReliable on

                    UNIX {
                      Path /var/run/conntrackd.ctl
                    }

                    Filter From Kernelspace {
                      Address Ignore {
                        IPv4_address 127.0.0.1
                        IPv4_address $(NODE_IP)
                        IPv4_address {{.store_gateway_vip}}
                        IPv4_address {{.recursive_dns_vip}}
                        IPv4_address {{.matchbox_vip}}
                        IPv4_address {{.lan_gateway_vip}}
                      }
                    }
                  }

passwd:
  users:
  - name: {{.default_user}}
    ssh_authorized_keys:
      - {{.ssh_authorized_key}}
