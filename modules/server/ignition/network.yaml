---
variant: fcos
version: 1.4.0
systemd:
  units:
    # systemd-networkd work around "could not connect to dbus: permission denied"
    - name: systemd-networkd.service
      enabled: true
      dropins:
        - name: 10-dependencies.conf
          contents: |
            [Unit]
            After=dbus.socket
    - name: systemd-networkd-wait-online.service
      enabled: true
    - name: NetworkManager.service
      mask: true
    - name: NetworkManager-wait-online.service
      mask: true

storage:
  files:
    # systemd-networkd defaults #
    - path: /etc/systemd/network/99-default.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=*

          [Link]
          Unmanaged=true

          [Network]
          LinkLocalAddressing=false
          DHCP=false

    # hardware interface #
    %{~ for hardware_interface_name, hardware_interface in hardware_interfaces ~}
    - path: /etc/systemd/network/10-${hardware_interface_name}.link
      mode: 0644
      contents:
        inline: |
          [Match]
          Virtualization=!vm
          Virtualization=!container
          PermanentMACAddress=${hardware_interface.mac}

          [Link]
          MTUBytes=${lookup(hardware_interface, "mtu", 1500)}
          MACAddressPolicy=persistent
          Name=${hardware_interface_name}
    - path: /etc/systemd/network/20-${hardware_interface_name}.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Virtualization=!vm
          Virtualization=!container
          Name=${hardware_interface_name}

          [Link]
          ARP=false
          ActivationPolicy=always-up
          MTUBytes=${lookup(hardware_interface, "mtu", 1500)}

          [Network]
          LinkLocalAddressing=false
          DHCP=false
          %{~ for network_name, vlan in hardware_interface.vlans ~}
          VLAN=${vlan.interface_name}
          %{~ endfor ~}

    # VLAN interfaces
    %{~ for network_name, vlan in hardware_interface.vlans ~}
    - path: /etc/systemd/network/12-${vlan.interface_name}.netdev
      mode: 0644
      contents:
        inline: |
          [NetDev]
          Name=${vlan.interface_name}
          Kind=vlan

          [VLAN]
          Id=${vlan.vlan_id}
    - path: /etc/systemd/network/20-${vlan.interface_name}.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Virtualization=!vm
          Virtualization=!container
          Name=${vlan.interface_name}

          [Link]
          ARP=false
          MTUBytes=${lookup(hardware_interface, "mtu", 1500)}

          [Network]
          LinkLocalAddressing=false
          DHCP=false
    %{~ endfor ~}
    %{~ endfor ~}

    # tap interfaces
    %{~ for network_name, interface in interfaces ~}
    - path: /etc/systemd/network/20-${interface.source_interface_name}.network.d/10-macvtap.conf
      contents:
        inline: |
          [Network]
          MACVTAP=${interface.interface_name}
    - path: /etc/systemd/network/12-${interface.interface_name}.netdev
      mode: 0644
      contents:
        inline: |
          [NetDev]
          Name=${interface.interface_name}
          Kind=macvtap
          MACAddress=${lookup(interface, "mac", "")}

          [MACVTAP]
          Mode=bridge
    - path: /etc/systemd/network/20-${interface.interface_name}.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=${interface.interface_name}
          %{~ if !lookup(interface, "enable_dhcp", false) ~}

          [Link]
          MTUBytes=${lookup(interface, "mtu", 1500)}
          %{~ endif ~}

          [DHCP]
          UseMTU=true
          RouteMetric=${lookup(interface, "metric", 1024)}

          [Network]
          LinkLocalAddressing=${lookup(interface, "enable_linklocal", false)}
          DHCP=${lookup(interface, "enable_dhcp", false)}
          MulticastDNS=${lookup(interface, "enable_mdns", false)}
          %{~ if lookup(interface, "enable_netnum", false) ~}

          [Address]
          Address=${cidrhost(interface.prefix, host_netnum)}/${interface.cidr}
          AddPrefixRoute=false

          [Route]
          Protocol=kernel
          Scope=link
          PreferredSource=${cidrhost(interface.prefix, host_netnum)}
          Destination=${interface.prefix}
          Metric=${lookup(interface, "metric", 1024)}
          %{~ endif ~}
    %{~ endfor ~}