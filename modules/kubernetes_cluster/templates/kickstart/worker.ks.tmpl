selinux --disabled
repo --name=kubernetes --baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch

%packages --excludeWeakdeps --excludedocs

containerd
kubelet

%end

%post --erroronfail

mkdir -p {{.kubelet_path}}

##
## tls
##

cat <<EOF > {{.kubelet_path}}/ca.pem
{{.tls_ca}}EOF

cat <<EOF > {{.kubelet_path}}/bootstrap.pem
{{.tls_bootstrap}}EOF

cat <<EOF > {{.kubelet_path}}/bootstrap-key.pem
{{.tls_bootstrap_key}}EOF

##
## worker
##

cat <<EOF > /etc/containerd/config.toml
subreaper = true
oom_score = -999
[plugins]
  [plugins.cri]
    stream_server_address = "0.0.0.0"
    [plugins.cri.containerd]
      no_pivot = true
EOF

cat <<EOF > {{.kubelet_path}}/kubelet-config.yaml
kind: KubeletConfiguration
apiVersion: kubelet.config.k8s.io/v1beta1
authentication:
  anonymous:
    enabled: false
  webhook:
    enabled: true
  x509:
    clientCAFile: "{{.kubelet_path}}/ca.pem"
authorization:
  mode: Webhook
clusterDomain: "{{.cluster_domain}}"
clusterDNS:
  - "{{.cluster_dns_ip}}"
runtimeRequestTimeout: "15m"
rotateCertificates: true
serverTLSBootstrap: true
EOF

cat <<EOF > {{.kubelet_path}}/bootstrap.kubeconfig
apiVersion: v1
clusters:
- cluster:
    certificate-authority: {{.kubelet_path}}/ca.pem
    server: {{.apiserver_url}}
  name: {{.cluster_name}}
contexts:
- context:
    cluster: {{.cluster_name}}
    user: system:node:bootstrap
  name: default
current-context: default
kind: Config
preferences: {}
users:
- name: system:node:bootstrap
  user:
    client-certificate: {{.kubelet_path}}/bootstrap.pem
    client-key: {{.kubelet_path}}/bootstrap-key.pem
EOF

cat <<EOF > /etc/systemd/system/kubelet.service
[Unit]
Description=Kubernetes Kubelet
After=containerd.service
Requires=containerd.service

[Service]
ExecStart=/usr/bin/kubelet \
  --config={{.kubelet_path}}/kubelet-config.yaml \
  --kubeconfig={{.kubelet_path}}/kubelet.kubeconfig \
  --bootstrap-kubeconfig={{.kubelet_path}}/bootstrap.kubeconfig \
  --network-plugin=cni \
  --cert-dir={{.kubelet_path}} \
  --volume-plugin-dir={{.kubelet_path}}/volumeplugins \
  --container-runtime=remote \
  --container-runtime-endpoint=unix:///run/containerd/containerd.sock
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

##
## enable services
##

systemctl enable \
  containerd kubelet

%end