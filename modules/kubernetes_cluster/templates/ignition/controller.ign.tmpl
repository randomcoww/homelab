---
networkd:
  units:
    - name: {{.host_if}}.network
      contents: |
        [Match]
        Name={{.host_if}}

        [Network]
        LinkLocalAddressing=no
        DHCP=no
        Gateway={{.store_gateway_vip}}
        DNS={{.recursive_dns_vip}}

        [Link]
        MTUBytes={{.mtu}}

        [Address]
        Address={{.host_ip}}/{{.host_netmask}}

systemd:
  units:
    - name: docker.service
      mask: true
    - name: docker.socket
      mask: true
    - name: containerd.service
      enabled: true
      dropins:
        - name: containerd.conf
          contents: |
            [Service]
            LimitNOFILE=infinity
            ExecStart=
            ExecStart=/usr/bin/env PATH=${TORCX_BINDIR}:${PATH} ${TORCX_BINDIR}/containerd
            RestartSec=5
    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubelet via Hyperkube ACI
        After=network.target

        [Service]
        Environment="KUBELET_IMAGE=docker://{{.kubelet_image}}"
        Environment="RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \
          --volume=resolv,kind=host,source=/etc/resolv.conf \
          --volume var-lib-containerd,kind=host,source=/var/lib/containerd,readOnly=false \
          --mount volume=resolv,target=/etc/resolv.conf \
          --mount volume=var-lib-containerd,target=/var/lib/containerd \
          --insecure-options=image"
        ExecStartPre=/bin/mkdir -p \
          /var/log/containers \
          /etc/cni/net.d
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --config={{.kubelet_path}}/kubelet-config.yaml \
          --node-ip={{.host_ip}} \
          --register-node=false \
          --container-runtime=remote \
          --container-runtime-endpoint=unix:///run/containerd/containerd.sock
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid
        Restart=always
        RestartSec=5

        [Install]
        WantedBy=multi-user.target

storage:
  files:
    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline:
          {{.hostname}}
    - path: /etc/sysctl.d/ipforward.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          net.ipv4.ip_forward=1
          net.ipv4.ip_nonlocal_bind=1
    - path: /etc/sysctl.d/max-user-watches.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          fs.inotify.max_user_watches=16184

    - path: {{.kubelet_path}}/ca.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_ca}}"
    - path: {{.kubelet_path}}/ca-key.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_ca_key}}"
    - path: {{.kubelet_path}}/kubernetes.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_kubernetes}}"
    - path: {{.kubelet_path}}/kubernetes-key.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_kubernetes_key}}"

    - path: /etc/containerd/config.toml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          subreaper = true
          oom_score = -999
          [plugins]
            [plugins.cri]
              stream_server_address = "127.0.0.1"
              [plugins.cri.containerd]
                no_pivot = true

    - path: {{.kubelet_path}}/etcd-ca.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_etcd_ca}}"
    - path: {{.kubelet_path}}/etcd.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_etcd}}"
    - path: {{.kubelet_path}}/etcd-key.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_etcd_key}}"
    - path: {{.kubelet_path}}/etcd-client.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_etcd_client}}"
    - path: {{.kubelet_path}}/etcd-client-key.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_etcd_client_key}}"

    - path: {{.kubelet_path}}/kube-controller-manager.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_controller_manager}}"
    - path: {{.kubelet_path}}/kube-controller-manager-key.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_controller_manager_key}}"
    - path: {{.kubelet_path}}/kube-scheduler.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_scheduler}}"
    - path: {{.kubelet_path}}/kube-scheduler-key.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_scheduler_key}}"

    - path: {{.kubelet_path}}/service-account.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_service_account}}"
    - path: {{.kubelet_path}}/service-account-key.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_service_account_key}}"

    - path: {{.kubelet_path}}/kubelet-config.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            anonymous:
              enabled: true
            webhook:
              enabled: false
          authorization:
            mode: AlwaysAllow
          staticPodPath: {{.kubelet_path}}/manifests
          makeIPTablesUtilChains: false
    - path: {{.kubelet_path}}/kube-scheduler.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          apiVersion: kubescheduler.config.k8s.io/v1alpha1
          kind: KubeSchedulerConfiguration
          clientConnection:
            kubeconfig: "{{.kubelet_path}}/kube-scheduler.kubeconfig"
          leaderElection:
            leaderElect: true
    - path: {{.kubelet_path}}/kube-controller-manager.kubeconfig
      filesystem: root
      mode: 420
      contents:
        inline: |-
          apiVersion: v1
          clusters:
          - cluster:
              certificate-authority: {{.kubelet_path}}/ca.pem
              server: {{.apiserver_url}}
            name: {{.cluster_name}}
          contexts:
          - context:
              cluster: {{.cluster_name}}
              user: system:kube-controller-manager
            name: default
          current-context: default
          kind: Config
          preferences: {}
          users:
          - name: system:kube-controller-manager
            user:
              client-certificate: {{.kubelet_path}}/kube-controller-manager.pem
              client-key: {{.kubelet_path}}/kube-controller-manager-key.pem
    - path: {{.kubelet_path}}/kube-scheduler.kubeconfig
      filesystem: root
      mode: 420
      contents:
        inline: |-
          apiVersion: v1
          clusters:
          - cluster:
              certificate-authority: {{.kubelet_path}}/ca.pem
              server: {{.apiserver_url}}
            name: {{.cluster_name}}
          contexts:
          - context:
              cluster: {{.cluster_name}}
              user: system:kube-scheduler
            name: default
          current-context: default
          kind: Config
          preferences: {}
          users:
          - name: system:kube-scheduler
            user:
              client-certificate: {{.kubelet_path}}/kube-scheduler.pem
              client-key: {{.kubelet_path}}/kube-scheduler-key.pem

    - path: {{.kubelet_path}}/manifests/keepalived.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            namespace: kube-system
            name: keepalived
          spec:
            restartPolicy: Always
            hostNetwork: true
            containers:
            - name: keepalived
              image: {{.keepalived_image}}
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
              args:
              - "-P"
              env:
              - name: KEEPALIVED_LOCAL_CONFIG
                value: |-
                  global_defs {
                    vrrp_version 3
                    vrrp_iptables
                    dynamic_interfaces
                  }
                  vrrp_instance VI_kube-master_store {
                    no_accept
                    nopreempt
                    state BACKUP
                    strict_mode off
                    virtual_router_id 70
                    interface {{.host_if}}
                    priority 100
                    virtual_ipaddress {
                      {{.controller_vip}}
                    }
                  }
              livenessProbe:
                httpGet:
                  scheme: HTTP
                  host: 127.0.0.1
                  port: 8080
                  path: "/healthz"
                initialDelaySeconds: 15
                timeoutSeconds: 15

    - path: {{.kubelet_path}}/manifests/etcd-wrapper.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          kind: Pod
          apiVersion: v1
          metadata:
            namespace: kube-system
            name: kube-etcd
          spec:
            hostNetwork: true
            restartPolicy: Always
            containers:
            - name: kube-etcd-wrapper
              image: {{.etcd_wrapper_image}}
              args:
              - "--name=$(NODE_NAME)"
              - "--cert-file={{.kubelet_path}}/etcd.pem"
              - "--key-file={{.kubelet_path}}/etcd-key.pem"
              - "--client-cert-file={{.kubelet_path}}/etcd-client.pem"
              - "--client-key-file={{.kubelet_path}}/etcd-client-key.pem"
              - "--trusted-ca-file={{.kubelet_path}}/etcd-ca.pem"
              - "--peer-cert-file={{.kubelet_path}}/etcd.pem"
              - "--peer-key-file={{.kubelet_path}}/etcd-key.pem"
              - "--peer-trusted-ca-file={{.kubelet_path}}/etcd-ca.pem"
              - "--initial-advertise-peer-urls=https://$(INTERNAL_IP):{{.etcd_peer_port}}"
              - "--listen-peer-urls=https://$(INTERNAL_IP):{{.etcd_peer_port}}"
              - "--listen-client-urls={{.etcd_local_endpoint}},https://$(INTERNAL_IP):{{.etcd_client_port}}"
              - "--advertise-client-urls=https://$(INTERNAL_IP):{{.etcd_client_port}}"
              - "--initial-cluster={{.etcd_initial_cluster}}"
              - "--initial-cluster-token={{.etcd_cluster_token}}"
              - "--etcd-servers={{.etcd_endpoints}}"
              - "--backup-dir={{.kubelet_path}}/etcd/backup"
              - "--backup-file={{.kubelet_path}}/etcd/backup/etcd.db"
              - "--tls-dir={{.kubelet_path}}"
              - "--image={{.etcd_image}}"
              - "--pod-spec-file={{.kubelet_path}}/manifests/etcd.json"
              - "--s3-backup-path={{.s3_backup_path}}"
              - "--backup-interval=30m"
              - "--healthcheck-interval=10s"
              - "--pod-update-interval=3m"
              env:
              - name: AWS_ACCESS_KEY_ID
                value: "{{.aws_access_key_id}}"
              - name: AWS_SECRET_ACCESS_KEY
                value: "{{.aws_secret_access_key}}"
              - name: AWS_DEFAULT_REGION
                value: "{{.aws_region}}"
              - name: AWS_SDK_LOAD_CONFIG
                value: "1"
              - name: INTERNAL_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.hostIP
              - name: NODE_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: spec.nodeName
              volumeMounts:
              - name: kubernetes-path
                mountPath: "{{.kubelet_path}}"
                readOnly: false
            volumes:
            - name: kubernetes-path
              hostPath:
                path: "{{.kubelet_path}}"

    - path: {{.kubelet_path}}/manifests/kube-apiserver.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          kind: Pod
          apiVersion: v1
          metadata:
            namespace: kube-system
            name: kube-apiserver
          spec:
            hostNetwork: true
            restartPolicy: Always
            containers:
            - name: kube-apiserver
              image: {{.kube_apiserver_image}}
              command:
              - kube-apiserver
              - "--secure-port={{.apiserver_secure_port}}"
              - "--allow-privileged=true"
              - "--authorization-mode=Node,RBAC"
              - "--bind-address=0.0.0.0"
              - "--client-ca-file={{.kubelet_path}}/ca.pem"
              - "--enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota"
              - "--etcd-cafile={{.kubelet_path}}/etcd-ca.pem"
              - "--etcd-certfile={{.kubelet_path}}/etcd-client.pem"
              - "--etcd-keyfile={{.kubelet_path}}/etcd-client-key.pem"
              - "--etcd-servers={{.etcd_local_endpoint}}"
              - "--kubelet-certificate-authority={{.kubelet_path}}/ca.pem"
              - "--kubelet-client-certificate={{.kubelet_path}}/kubernetes.pem"
              - "--kubelet-client-key={{.kubelet_path}}/kubernetes-key.pem"
              - "--runtime-config=api/all"
              - "--service-account-key-file={{.kubelet_path}}/service-account.pem"
              - "--service-cluster-ip-range={{.cluster_ip_range}}"
              - "--tls-cert-file={{.kubelet_path}}/kubernetes.pem"
              - "--tls-private-key-file={{.kubelet_path}}/kubernetes-key.pem"
              - "--kubelet-preferred-address-types=InternalIP"
              - "--v=2"
              volumeMounts:
              - name: kubernetes-path
                mountPath: "{{.kubelet_path}}"
                readOnly: true
              livenessProbe:
                httpGet:
                  scheme: HTTP
                  host: 127.0.0.1
                  port: 8080
                  path: "/healthz"
                initialDelaySeconds: 15
                timeoutSeconds: 15
            volumes:
            - name: kubernetes-path
              hostPath:
                path: "{{.kubelet_path}}"

    - path: {{.kubelet_path}}/manifests/kube-controller-manager.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          kind: Pod
          apiVersion: v1
          metadata:
            namespace: kube-system
            name: kube-controller-manager
          spec:
            hostNetwork: true
            restartPolicy: Always
            containers:
            - name: kube-controller-manager
              image: {{.kube_controller_manager_image}}
              command:
              - kube-controller-manager
              - "--address=0.0.0.0"
              - "--cluster-cidr={{.cluster_cidr}}"
              - "--allocate-node-cidrs=true"
              - "--cluster-name={{.cluster_name}}"
              - "--cluster-signing-cert-file={{.kubelet_path}}/ca.pem"
              - "--cluster-signing-key-file={{.kubelet_path}}/ca-key.pem"
              - "--kubeconfig={{.kubelet_path}}/kube-controller-manager.kubeconfig"
              - "--leader-elect=true"
              - "--root-ca-file={{.kubelet_path}}/ca.pem"
              - "--service-account-private-key-file={{.kubelet_path}}/service-account-key.pem"
              - "--service-cluster-ip-range={{.cluster_ip_range}}"
              - "--use-service-account-credentials=true"
              - "--v=2"
              volumeMounts:
              - name: kubernetes-path
                mountPath: "{{.kubelet_path}}"
                readOnly: true
              livenessProbe:
                httpGet:
                  scheme: HTTP
                  host: 127.0.0.1
                  port: 10252
                  path: "/healthz"
                initialDelaySeconds: 15
                timeoutSeconds: 15
            volumes:
            - name: kubernetes-path
              hostPath:
                path: "{{.kubelet_path}}"

    - path: {{.kubelet_path}}/manifests/kube-scheduler.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          ---
          kind: Pod
          apiVersion: v1
          metadata:
            namespace: kube-system
            name: kube-scheduler
          spec:
            restartPolicy: Always
            hostNetwork: true
            containers:
            - name: kube-scheduler
              image: {{.kube_scheduler_image}}
              command:
              - kube-scheduler
              - "--config={{.kubelet_path}}/kube-scheduler.yaml"
              - "--v=2"
              livenessProbe:
                httpGet:
                  scheme: HTTP
                  host: 127.0.0.1
                  port: 10251
                  path: "/healthz"
                initialDelaySeconds: 15
                timeoutSeconds: 15
              volumeMounts:
              - name: kubernetes-path
                mountPath: "{{.kubelet_path}}"
                readOnly: true
            volumes:
            - name: kubernetes-path
              hostPath:
                path: "{{.kubelet_path}}"

passwd:
  users:
  - name: {{.default_user}}
    ssh_authorized_keys:
      - {{.ssh_authorized_key}}
