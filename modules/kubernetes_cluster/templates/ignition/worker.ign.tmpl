---
networkd:
  units:
    - name: {{.host_if}}.network
      contents: |
        [Match]
        Name={{.host_if}}

        [Network]
        LinkLocalAddressing=no
        DHCP=yes

        [DHCP]
        UseMTU=yes

systemd:
  units:
    - name: docker.service
      mask: true
    - name: docker.socket
      mask: true
    - name: containerd.service
      enabled: true
      dropins:
        - name: containerd.conf
          contents: |
            [Service]
            ExecStart=
            ExecStart=/usr/bin/env PATH=${TORCX_BINDIR}:${PATH} ${TORCX_BINDIR}/containerd
            OOMScoreAdjust=-999
    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubelet via Hyperkube ACI
        After=containerd.service
        Requires=containerd.service

        [Service]
        Environment="KUBELET_IMAGE=docker://{{.hyperkube_image}}"
        Environment="RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \
          --volume=resolv,kind=host,source=/etc/resolv.conf \
          --volume=cni,kind=host,source=/etc/cni/net.d,readOnly=true \
          --mount volume=resolv,target=/etc/resolv.conf \
          --mount volume=cni,target=/etc/cni/net.d \
          --insecure-options=image"
        ExecStartPre=/bin/mkdir -p \
          /var/log/containers \
          /etc/cni/net.d
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --config={{.kubelet_path}}/kubelet-config.yaml \
          --kubeconfig={{.kubelet_path}}/kubelet.kubeconfig \
          --bootstrap-kubeconfig={{.kubelet_path}}/bootstrap.kubeconfig \
          --network-plugin=cni \
          --cert-dir={{.kubelet_path}} \
          --volume-plugin-dir={{.kubelet_path}}/volumeplugins \
          --container-runtime=remote \
          --container-runtime-endpoint=unix:///var/run/containerd/containerd.sock
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid
        Restart=always
        RestartSec=5

        [Install]
        WantedBy=multi-user.target

storage:
  files:
    - path: /etc/sysctl.d/max-user-watches.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          fs.inotify.max_user_watches=16184

    - path: {{.kubelet_path}}/ca.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_ca}}"
    - path: {{.kubelet_path}}/bootstrap.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_bootstrap}}"
    - path: {{.kubelet_path}}/bootstrap-key.pem
      filesystem: root
      mode: 420
      contents:
        inline: "{{.tls_bootstrap_key}}"

    - path: {{.kubelet_path}}/kubelet-config.yaml
      filesystem: root
      mode: 420
      contents:
        inline: |-
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: true
            x509:
              clientCAFile: "{{.kubelet_path}}/ca.pem"
          authorization:
            mode: Webhook
          clusterDomain: "{{.cluster_domain}}"
          clusterDNS:
            - "{{.cluster_dns_ip}}"
          runtimeRequestTimeout: "15m"
          rotateCertificates: true
          serverTLSBootstrap: true
          featureGates:
            RotateKubeletClientCertificate: true
            RotateKubeletServerCertificate: true
    - path: {{.kubelet_path}}/bootstrap.kubeconfig
      filesystem: root
      mode: 420
      contents:
        inline: |-
          apiVersion: v1
          clusters:
          - cluster:
              certificate-authority: {{.kubelet_path}}/ca.pem
              server: {{.apiserver_url}}
            name: {{.cluster_name}}
          contexts:
          - context:
              cluster: {{.cluster_name}}
              user: system:node:bootstrap
            name: default
          current-context: default
          kind: Config
          preferences: {}
          users:
          - name: system:node:bootstrap
            user:
              client-certificate: {{.kubelet_path}}/bootstrap.pem
              client-key: {{.kubelet_path}}/bootstrap-key.pem

passwd:
  users:
  - name: {{.default_user}}
    ssh_authorized_keys:
      - {{.ssh_authorized_key}}
