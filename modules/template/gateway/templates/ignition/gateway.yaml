---
variant: fcos
version: 1.0.0
systemd:
  units:
    - name: nftables.service
      enabled: true
    - name: keepalived.service
      enabled: true
      dropins:
        - name: 10-dependency.conf
          contents: |
            [Unit]
            Requires=nftables.service
            PartOf=nftables.service

            [Service]
            EnvironmentFile=
            Environment=KEEPALIVED_OPTIONS="-D -P"

storage:
  files:
    - path: /etc/systemd/network/20-${p.networks_by_key.sync.if}.network.d/backup-route.conf
      mode: 0644
      contents:
        inline: |
          [Route]
          Gateway=${p.networks_by_key.sync.router}
          Destination=0.0.0.0/0
          Table=${slave_default_route_table}

          [RoutingPolicyRule]
          Table=${slave_default_route_table}
          Priority=${slave_default_route_priority}
    - path: /etc/systemd/network/20-${p.networks_by_key.wan.if}.network.d/gateway.conf
      mode: 0644
      contents:
        inline: |
          [Link]
          RequiredForOnline=false

          [DHCP]
          UseDNS=false
          UseNTP=false
          SendHostname=false
          UseHostname=false
          UseDomains=false
          UseTimezone=false
          RouteTable=${master_default_route_table}

          [Network]
          DNS=${services.upstream_dns.vip}
          DNSOverTLS=yes
          Domains=~
    # VRRPv3 currently fails with Invalid VRRPv3 checksum
    - path: /etc/keepalived/keepalived.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |-
          global_defs {
            vrrp_version 2
            vrrp_iptables
            vrrp_garp_master_refresh 60
            nftables keepalived
            dynamic_interfaces allow_if_changes
            max_auto_priority -1
          }
          vrrp_instance VI_gateway {
            # This makes the VIP inaccessible on host
            # no_accept
            nopreempt
            state BACKUP
            virtual_router_id ${vrrp_id}
            interface ${p.networks_by_key.sync.if}
            priority 10
            virtual_rules {
              to all lookup ${master_default_route_table} priority ${master_default_route_priority}
            }
            virtual_ipaddress {
              %{~ for i, v in p.network ~}
              %{~ if lookup(v, "router", null) != null ~}
              %{~ if lookup(v, "ip", null) != null ~}
              ${v.router} dev ${v.if}
              %{~ else ~}
              ${v.router}/${v.cidr} dev ${v.if}
              %{~ endif ~}
              %{~ endif ~}
              %{~ endfor ~}
              0.0.0.0 dev ${p.networks_by_key.wan.if}
            }
          }
    - path: /etc/sysconfig/nftables.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |-
          %{~ for v in p.network ~}
          %{~ if lookup(v, "network", null) != null && lookup(v, "cidr", null) != null ~}
          define addr_${v.label} = ${v.network}/${v.cidr}
          %{~ endif ~}
          %{~ if lookup(v, "if", null) != null ~}
          define if_${v.label} = ${v.if}
          %{~ endif ~}
          %{~ endfor ~}
          %{~ for k, v in loadbalancer_pools ~}
          define lb_${k} = ${v.network}/${v.cidr}
          %{~ endfor ~}

          table ip filter {
            chain base_checks {
              ct state {established, related} accept;
              ct state invalid drop;
            }

            chain input {
              type filter hook input priority 0; policy drop;
              jump base_checks;

              iifname "lo" accept;
              iifname != "lo" ip daddr 127.0.0.1/8 drop;

              ip protocol icmp icmp type { echo-request, echo-reply, time-exceeded, parameter-problem, destination-unreachable } accept;

              iifname $if_internal accept;
              iifname $if_sync accept;
              iifname $if_lan pkttype multicast accept;

              iifname $if_lan oifname $if_internal tcp dport ssh accept;
              iifname $if_lan oifname $if_internal tcp dport domain accept;
              iifname $if_lan oifname $if_internal udp dport domain accept;
              iifname $if_lan ip daddr $lb_kubernetes accept;
              oifname $if_internal ip daddr ${services.external_dnat.vip} tcp dport ${services.external_dnat.ports.https} accept;
            }

            chain forward {
              type filter hook forward priority 0; policy drop;
              jump base_checks;

              ip protocol icmp icmp type { echo-request, echo-reply, time-exceeded, parameter-problem, destination-unreachable } accept;

              oifname $if_wan accept;

              iifname $if_lan oifname $if_internal tcp dport ssh accept;
              iifname $if_lan oifname $if_internal tcp dport domain accept;
              iifname $if_lan oifname $if_internal udp dport domain accept;
              iifname $if_lan ip daddr $lb_kubernetes accept;
              oifname $if_internal ip daddr ${services.external_dnat.vip} tcp dport ${services.external_dnat.ports.https} accept;
            }
          }

          table ip nat {
            chain prerouting {
              type nat hook prerouting priority -100; policy accept;
              iifname $if_wan tcp dport ${services.external_dnat.ports.https} dnat ${services.external_dnat.vip}:${services.external_dnat.ports.https};
            }

            chain postrouting {
              type nat hook postrouting priority 100; policy accept;
              iifname != $if_wan oifname $if_wan masquerade;
            }
          }
          ;

    ##
    ## pod config
    ##

    - path: ${pod_mount_path}/conntrackd/conntrackd.conf
      mode: 0644
      contents:
        inline: |-
          Sync {
            Mode FTFW {
              StartupResync on
              DisableExternalCache on
            }

            Multicast {
              IPv4_address 225.0.0.50
              Group 3780
              IPv4_interface ${p.networks_by_key.sync.ip}
              Interface ${p.networks_by_key.sync.if}
              SndSocketBuffer 24985600
              RcvSocketBuffer 24985600
              Checksum on
            }

            Options {
              TCPWindowTracking on
              ExpectationSync on
            }
          }

          General {
            Systemd off
            LogFile /dev/stdout
            Syslog off
            HashSize 32768
            HashLimit 131072
            NetlinkBufferSize 2097152
            NetlinkBufferSizeMaxGrowth 8388608
            NetlinkEventsReliable on

            UNIX {
              Path /var/run/conntrackd.ctl
            }

            Filter From Kernelspace {
              Address Ignore {
                IPv4_address 127.0.0.1
                IPv4_address ${services.recursive_dns.vip}
                IPv4_address ${p.networks_by_key.sync.network}/${p.networks_by_key.sync.cidr}
                %{~ for k in p.network ~}
                %{~ if lookup(k, "ip", null) != null ~}
                IPv4_address ${k.ip}
                %{~ endif ~}
                %{~ endfor ~}
                %{~ for k in p.network ~}
                %{~ if lookup(k, "router", null) != null ~}
                IPv4_address ${k.router}
                %{~ endif ~}
                %{~ endfor ~}
              }
            }
          }

    - path: ${kubelet_path}/manifests/conntrackd.yaml
      mode: 0644
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            namespace: kube-system
            name: conntrackd
          spec:
            restartPolicy: Always
            hostNetwork: true
            containers:
            - name: conntrackd
              image: ${container_images.conntrackd}
              args: [ "-C", "/etc/conntrackd/conntrackd.conf" ]
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
                  - SYS_NICE
              volumeMounts:
              - name: config-volume
                mountPath: /etc/conntrackd/conntrackd.conf
                readOnly: true
            volumes:
            - name: config-volume
              hostPath:
                path: ${pod_mount_path}/conntrackd/conntrackd.conf