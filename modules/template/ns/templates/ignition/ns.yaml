---
variant: fcos
version: 1.0.0
storage:
  files:
    - path: /etc/systemd/network/20-${p.networks_by_key.nat.if}.network.d/default-route.conf
      mode: 0644
      contents:
        inline: |
          [Route]
          Gateway=${p.networks_by_key.nat.router}
          Destination=0.0.0.0/0

          [Network]
          DNS=${services.upstream_dns.vip}#${services.upstream_dns.url}
          DNSOverTLS=true
          Domains=~
    - path: /etc/systemd/resolved.conf.d/10-mdns-stub.conf
      mode: 0644
      contents:
        inline: |
          [Resolve]
          DNSStubListener=true

    ##
    ## pod config
    ##

    - path: ${pod_mount_path}/coredns/Corefile
      mode: 0644
      contents:
        inline: |-
          ${domains.internal}. {
            bind ${services.recursive_dns.vip} ${join(" ", compact([
              for v in p.network:
              lookup(v, "ip", "")
            ]))}
            errors
            forward . ${services.internal_dns.vip}
          }
          ${domains.internal_mdns}. {
            bind ${services.recursive_dns.vip} ${join(" ", compact([
              for v in p.network:
              lookup(v, "ip", "")
            ]))}
            errors
            forward . 127.0.0.53
          }
          . {
            bind ${services.recursive_dns.vip} ${join(" ", compact([
              for v in p.network:
              lookup(v, "ip", "")
            ]))}
            errors
            health
            forward . tls://${services.upstream_dns.vip} {
              tls_servername ${services.upstream_dns.url}
              health_check 20s
            }
            prometheus :${services.recursive_dns.ports.prometheus}
            cache 30
            reload
            loadbalance
          }

    - path: ${pod_mount_path}/kea/kea-ctrl-agent.conf
      mode: 0644
      contents:
        inline: |-
          {
            "Control-agent": {
              "http-host": "0.0.0.0",
              "http-port": ${services.kea.ports.peer},
              "control-sockets": {
                "dhcp4": {
                  "socket-type": "unix",
                  "socket-name": "${kea_path}/kea-dhcp4-ctrl.sock"
                }
              }
            }
          }

    - path: ${pod_mount_path}/kea/kea-dhcp4.conf
      mode: 0644
      contents:
        inline: |-
          {
            "Dhcp4": {
              "valid-lifetime": 7200,
              "renew-timer": 1800,
              "rebind-timer": 3600,
              "lease-database": {
                "type": "memfile",
                "persist": true,
                "name": "${kea_path}/kea-leases4.csv"
              },
              "interfaces-config": {
                "interfaces": ${jsonencode([
                  for k in p.network:
                  k.if
                  if lookup(k, "dhcp_pool", null) != null && lookup(k, "ip", null) != null
                ])}
              },
              "control-socket": {
                "socket-type": "unix",
                "socket-name": "${kea_path}/kea-dhcp4-ctrl.sock"
              },
              "option-data": [
                {
                  "name": "domain-name",
                  "data": "${domains.internal}"
                },
                {
                  "name": "domain-name-servers",
                  "data": "${services.recursive_dns.vip}",
                  "csv-format": true
                }
              ],
              "hooks-libraries": [
                {
                  "library": "${kea_hooks_path}/libdhcp_lease_cmds.so",
                  "parameters": {}
                },
                {
                  "library": "${kea_hooks_path}/libdhcp_ha.so",
                  "parameters": {
                    "high-availability": [
                      {
                        "this-server-name": "${p.hostname}",
                        "mode": "load-balancing",
                        "max-unacked-clients": 0,
                        "peers": ${kea_ha_peers}
                      }
                    ]
                  }
                }
              ],
              "subnet4": ${jsonencode([
                for k in p.network:
                {
                  subnet = "${k.network}/${k.cidr}",
                  option-data = concat( lookup(k, "router", null) != null ? [
                    {
                      name = "routers"
                      data = k.router
                    }
                  ] : [], lookup(k, "mtu", null) != null ? [
                    {
                      name = "interface-mtu"
                      data = format("%s", k.mtu)
                    }
                  ] : [])
                  pools = [
                    {
                      pool = k.dhcp_pool
                    }
                  ]
                }
                if lookup(k, "dhcp_pool", null) != null && lookup(k, "ip", null) != null
              ])},
              "dhcp-ddns": {
                "enable-updates": true,
                "qualifying-suffix": "${domains.internal}.",
                "override-client-update": true,
                "override-no-update": true,
                "replace-client-name": "when-not-present"
              }
            }
          }

    - path: ${pod_mount_path}/keepalived/keepalived.conf
      mode: 0644
      contents:
        inline: |-
          global_defs {
            vrrp_version 3
            dynamic_interfaces allow_if_changes
            max_auto_priority -1
          }
          vrrp_instance VI_ns {
            nopreempt
            state BACKUP
            advert_int 0.01
            virtual_router_id ${vrrp_id}
            interface ${p.networks_by_key.internal.if}
            priority 250
            virtual_ipaddress {
              %{~ for v in p.network ~}
              %{~ if lookup(v.services, "recursive_dns", null) != null ~}
              %{~ if lookup(v, "ip", null) != null ~}
              ${v.services.recursive_dns.vip} dev ${v.if}
              %{~ else ~}
              ${v.services.recursive_dns.vip}/${v.cidr} dev ${v.if}
              %{~ endif ~}
              %{~ endif ~}
              %{~ endfor ~}
            }
          }

    ##
    ## pod manifests
    ##

    - path: ${kubelet_path}/manifests/kea.yaml
      mode: 0644
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            name: kea
          spec:
            restartPolicy: Always
            hostNetwork: true
            containers:
            - name: kea-control-agent
              image: ${container_images.kea}
              args: [ "kea-ctrl-agent", "-c", "/etc/kea/kea-ctrl-agent.conf" ]
              volumeMounts:
              - name: kea-share
                mountPath: "${kea_path}"
                readOnly: false
              - name: config-kea-ctrl-agent
                mountPath: /etc/kea/kea-ctrl-agent.conf
                readOnly: true
            - name: kea-dhcp4
              image: ${container_images.kea}
              args: [ "kea-dhcp4", "-c", "/etc/kea/kea-dhcp4.conf" ]
              volumeMounts:
              - name: kea-share
                mountPath: "${kea_path}"
                readOnly: false
              - name: config-kea-dhcp4
                mountPath: /etc/kea/kea-dhcp4.conf
                readOnly: true
            volumes:
            - name: kea-share
              emptyDir: {}
            - name: config-kea-ctrl-agent
              hostPath:
                path: ${pod_mount_path}/kea/kea-ctrl-agent.conf
            - name: config-kea-dhcp4
              hostPath:
                path: ${pod_mount_path}/kea/kea-dhcp4.conf

    - path: ${kubelet_path}/manifests/coredns.yaml
      mode: 0644
      contents:
        inline: |-
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            namespace: kube-system
            name: coredns
          spec:
            restartPolicy: Always
            hostNetwork: true
            containers:
            - name: coredns
              image: "${container_images.coredns}"
              resources:
                limits:
                  memory: 170Mi
                requests:
                  cpu: 100m
                  memory: 70Mi
              args: [ "-conf", "/etc/coredns/Corefile" ]
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 15
                timeoutSeconds: 5
                successThreshold: 1
                failureThreshold: 5
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  add:
                  - NET_BIND_SERVICE
                  drop:
                  - all
                readOnlyRootFilesystem: true
              volumeMounts:
              - name: config-coredns
                mountPath: /etc/coredns/Corefile
                readOnly: true
            - name: keepalived
              image: ${container_images.keepalived}
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
              args: [ "-P", "-D", "-f", "/etc/keepalived/keepalived.conf" ]
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 15
                timeoutSeconds: 5
                successThreshold: 1
                failureThreshold: 5
              volumeMounts:
              - name: config-keepalived
                mountPath: /etc/keepalived/keepalived.conf
                readOnly: true
            volumes:
            - name: config-coredns
              hostPath:
                path: ${pod_mount_path}/coredns/Corefile
            - name: config-keepalived
              hostPath:
                path: ${pod_mount_path}/keepalived/keepalived.conf