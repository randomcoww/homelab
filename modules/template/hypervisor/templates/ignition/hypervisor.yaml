---
variant: fcos
version: 1.0.0
systemd:
  units:
    - name: libvirtd-admin.socket
      mask: true
    - name: libvirtd-ro.socket
      mask: true
    - name: libvirtd.socket
      mask: true
    - name: libvirtd.service
      enabled: true
      dropins:
        - name: 10-listener.conf
          contents: |
            [Unit]
            ConditionVirtualization=!vm
            ConditionVirtualization=!container

            [Service]
            ExecStart=
            ExecStart=/usr/sbin/libvirtd --listen
    - name: ksm.service
      mask: true
    - name: ksmtuned.service
      mask: true
    %{~ if lookup(p, "mount_guest_image_device", null) != null ~}
    - name: prepare-vm-resources.service
      enabled: true
      contents: |
        [Unit]
        ConditionPathExists=${lookup(p, "mount_guest_image_device", null)}
        Before=matchbox.service
        WantedBy=matchbox.service
        After=local-fs.target

        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/usr/bin/podman volume create \
          --opt type=iso9660 \
          --opt device=${lookup(p, "mount_guest_image_device", null)} \
          guest_image_vol

        [Install]
        WantedBy=matchbox.service
    %{~ endif ~}
    - name: matchbox.service
      enabled: true
      contents: |
        [Unit]
        After=network-online.target
        Wants=network-online.target

        [Service]
        TimeoutStartSec=5m
        Restart=always
        RestartSec=10
        ExecStartPre=/usr/bin/mkdir -p \
          ${matchbox_data_path} ${matchbox_tls_path}
        ExecStartPre=-/usr/bin/podman load -i \
          ${matchbox_image_path}
        ExecStartPre=-/usr/bin/podman kill matchbox
        ExecStartPre=-/usr/bin/podman rm matchbox
        ExecStart=/usr/bin/podman run --rm -it \
          --name matchbox \
          --security-opt label=disable \
          --network host \
          %{~ if lookup(p, "mount_guest_image_device", null) != null ~}
          --mount type=volume,source=guest_image_vol,destination=${matchbox_assets_path} \
          %{~ else ~}
          -v ${p.iso_mount_path}:${matchbox_assets_path}:ro \
          %{~ endif ~}
          -v ${matchbox_tls_path}:${matchbox_tls_path}:ro \
          -v ${matchbox_data_path}:${matchbox_data_path} \
          ${container_images.matchbox} \
            -address=${services.renderer.vip}:${services.renderer.ports.http} \
            -rpc-address=0.0.0.0:${services.renderer.ports.rpc} \
            -ca-file=${matchbox_tls_path}/matchbox-ca.pem \
            -cert-file=${matchbox_tls_path}/matchbox.pem \
            -key-file=${matchbox_tls_path}/matchbox-key.pem \
            -data-path=${matchbox_data_path} \
            -assets-path=${matchbox_assets_path}

        [Install]
        WantedBy=multi-user.target
    - name: kea-dhcp4.service
      enabled: true
      dropins:
        - name: internal.conf
          contents: |
            [Unit]
            After=matchbox.service
            Wants=matchbox.service
            Before=libvirtd.service
            WantedBy=libvirtd.service

            [Service]
            ExecStart=
            ExecStart=/usr/sbin/kea-dhcp4 -c /etc/kea/kea-dhcp4-internal.conf

storage:
  files:
    - path: /etc/modules-load.d/mlx4_core.conf
      mode: 0644
      contents:
        inline: mlx4_core
    # https://docs.mellanox.com/pages/viewpage.action?pageId=19798214
    # FCOS writes these files too late and is not able to pass module params
    # - path: /etc/modprobe.d/mlx4_core.conf
    #   mode: 0644
    #   contents:
    #     inline: |
    #       options mlx4_core num_vfs=8 port_type_array=2 probe_vf=8
    ## Add VFs if using Intel NICs
    - path: /etc/udev/rules.d/sriov_numvfs.rules
      mode: 0644
      contents:
        inline: |
          %{~ for k, v in sriov_numvfs ~}
          ACTION=="add", SUBSYSTEM=="net", ENV{ID_NET_DRIVER}=="${k}", ATTR{device/sriov_numvfs}="${v}"
          %{~ endfor ~}
    ##
    ## internal network ${p.metadata.label} for host <-> local vm
    ##
    - path: /etc/systemd/network/10-${p.metadata.if}.netdev
      mode: 0644
      contents:
        inline: |
          [NetDev]
          Name=${p.metadata.if}
          Kind=bridge

    - path: /etc/systemd/network/10-${p.metadata.if}.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=${p.metadata.if}

          [Link]
          ARP=false

          [Network]
          LinkLocalAddressing=false
          DHCP=false
          MACVTAP=${p.metadata.label}-tap
          Bridge=${p.metadata.label}-dummy

    - path: /etc/systemd/network/10-${p.metadata.label}-dummy.netdev
      mode: 0644
      contents:
        inline: |
          [NetDev]
          Name=${p.metadata.label}-dummy
          Kind=dummy

    - path: /etc/systemd/network/10-${p.metadata.label}-dummy.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=${p.metadata.label}-dummy

          [Link]
          ARP=false

          [Network]
          LinkLocalAddressing=false
          DHCP=false
          Bridge=${p.metadata.if}

    - path: /etc/systemd/network/10-${p.metadata.label}-tap.netdev
      mode: 0644
      contents:
        inline: |
          [NetDev]
          Name=${p.metadata.label}-tap
          Kind=macvtap

          [MACVTAP]
          Mode=bridge

    - path: /etc/systemd/network/10-${p.metadata.label}-tap.network
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=${p.metadata.label}-tap

          [Network]
          LinkLocalAddressing=false
          DHCP=false

          [Address]
          Address=${p.metadata.ip}/${p.metadata.cidr}

    - path: /etc/kea/kea-dhcp4-internal.conf
      mode: 0644
      contents:
        inline: |
          {
            "Dhcp4": {
              "lease-database": {
                "type": "memfile",
                "persist": true,
                "name": "${kea_path}/kea-leases4.csv"
              },
              "interfaces-config": {
                "interfaces": ${jsonencode([
                  "${p.metadata.label}-tap"
                ])}
              },
              "client-classes": [
                {
                  "name": "ipxe_detected",
                  "test": "substring(option[77].hex,0,4) == 'iPXE'",
                  "boot-file-name": "http://${services.renderer.vip}:${services.renderer.ports.http}/boot.ipxe"
                }
              ],
              "subnet4": ${jsonencode([
                {
                  subnet = "${p.metadata.network}/${p.metadata.cidr}",
                  pools = [
                    {
                      pool = p.metadata.dhcp_pool
                    }
                  ]
                }
              ])}
            }
          }

    ##
    ## certs
    ##
    - path: ${matchbox_tls_path}/matchbox-ca.pem
      mode: 0644
      contents:
        inline: "${replace(tls_matchbox_ca, "\n", "\\n")}"
    - path: ${matchbox_tls_path}/matchbox.pem
      mode: 0644
      contents:
        inline: "${replace(tls_matchbox, "\n", "\\n")}"
    - path: ${matchbox_tls_path}/matchbox-key.pem
      mode: 0644
      contents:
        inline: "${replace(tls_matchbox_key, "\n", "\\n")}"

    - path: ${libvirt_tls_path}/CA/cacert.pem
      mode: 0644
      contents:
        inline: "${replace(tls_libvirt_ca, "\n", "\\n")}"
    - path: ${libvirt_tls_path}/libvirt/servercert.pem
      mode: 0644
      contents:
        inline: "${replace(tls_libvirt, "\n", "\\n")}"
    - path: ${libvirt_tls_path}/libvirt/clientcert.pem
      mode: 0644
      contents:
        inline: "${replace(tls_libvirt, "\n", "\\n")}"
    - path: ${libvirt_tls_path}/libvirt/private/serverkey.pem
      mode: 0644
      contents:
        inline: "${replace(tls_libvirt_key, "\n", "\\n")}"
    - path: ${libvirt_tls_path}/libvirt/private/clientkey.pem
      mode: 0644
      contents:
        inline: "${replace(tls_libvirt_key, "\n", "\\n")}"

passwd:
  users:
    - name: ${user}
      groups:
        - libvirt