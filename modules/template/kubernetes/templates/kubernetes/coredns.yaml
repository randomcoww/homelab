apiVersion: v1
kind: ServiceAccount
metadata:
  name: coredns
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile

---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: coredns-psp
spec:
  allowedCapabilities: ['NET_BIND_SERVICE']
  volumes: ['configMap', 'secret']
  hostNetwork: true
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    addonmanager.kubernetes.io/mode: Reconcile
  name: system:coredns
rules:
- apiGroups: [""]
  resources: ["endpoints", "namespaces"]
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources: ["services", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get","watch","list"]
- apiGroups: ["extensions"]
  resources: ["podsecuritypolicies"]
  verbs: ["use"]
  resourceNames: ["coredns-psp"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    addonmanager.kubernetes.io/mode: EnsureExists
  name: system:coredns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:coredns
subjects:
- kind: ServiceAccount
  name: coredns
  namespace: kube-system

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
  labels:
    addonmanager.kubernetes.io/mode: EnsureExists
data:
  Corefile: |
    .:53 {
      errors
      health
      kubernetes ${domains.kubernetes_cluster} in-addr.arpa ip6.arp {
        pods insecure
        fallthrough in-addr.arpa ip6.arpa
      }
      etcd ${domains.internal} in-addr.arpa ip6.arp {
        fallthrough in-addr.arpa ip6.arpa
      }
      forward . ${services.recursive_dns.vip}
      prometheus :${services.internal_dns.ports.prometheus}
      cache 30
      reload
      loadbalance
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coredns
  namespace: kube-system
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "CoreDNS"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      k8s-app: kube-dns
  template:
    metadata:
      labels:
        k8s-app: kube-dns
    spec:
      priorityClassName: system-cluster-critical
      serviceAccountName: coredns
      tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - name: coredns
        image: "${container_images.coredns}"
        imagePullPolicy: Always
        args: [ "-conf", "/etc/coredns/Corefile" ]
        volumeMounts:
        - name: config-volume
          mountPath: /etc/coredns
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        - containerPort: 9153
          name: metrics
          protocol: TCP
        ## Not working with terraform provider
        # livenessProbe:
        #   httpGet:
        #     path: /health
        #     port: 8080
        #   initialDelaySeconds: 60
        #   timeoutSeconds: 5
        #   successThreshold: 1
        #   failureThreshold: 5
      - name: etcd
        image: ${container_images.etcd}
        command: [ "/usr/local/bin/etcd" ]
      - name: external-dns
        image: ${container_images.external_dns}
        args:
        - --source=service
        - --source=ingress
        - --provider=coredns
        - --log-level=debug
        - --domain-filter=${domains.internal}
      dnsPolicy: Default
      volumes:
      - name: config-volume
        configMap:
          name: coredns
          items:
          - key: Corefile
            path: Corefile

---
apiVersion: v1
kind: Service
metadata:
  name: kube-dns
  namespace: kube-system
  annotations:
    prometheus.io/port: "9153"
    prometheus.io/scrape: "true"
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
spec:
  type: ClusterIP
  clusterIP: ${services.kubernetes_dns.vip}
  ports:
  - name: dns
    port: 53
    protocol: UDP
  - name: dns-tcp
    port: 53
    protocol: TCP
  - name: dns-tls
    port: 9153
    protocol: TCP
  selector:
    k8s-app: kube-dns

# Terraform resource can't create LoadBalancer services properly
# ---
# kind: Service
# apiVersion: v1
# metadata:
#   name: external-dns-tcp
#   namespace: kube-system
#   annotations:
#     metallb.universe.tf/allow-shared-ip: external-dns
# spec:
#   type: LoadBalancer
#   loadBalancerIP: ${services.internal_dns.vip}
#   ports:
#   - name: default
#     port: 53
#     targetPort: 53
#     protocol: TCP
#   selector:
#     k8s-app: kube-dns

# ---
# kind: Service
# apiVersion: v1
# metadata:
#   name: external-dns-udp
#   namespace: kube-system
#   annotations:
#     metallb.universe.tf/allow-shared-ip: external-dns
# spec:
#   type: LoadBalancer
#   loadBalancerIP: ${services.internal_dns.vip}
#   ports:
#   - name: default
#     port: 53
#     targetPort: 53
#     protocol: UDP
#   selector:
#     k8s-app: kube-dns