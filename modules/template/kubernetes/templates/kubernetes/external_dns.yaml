apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-dns
  namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-dns
rules:
- apiGroups: [""]
  resources: ["endpoints", "pods", "services", "nodes"]
  verbs: ["get", "watch", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-dns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns
subjects:
- kind: ServiceAccount
  name: external-dns
  namespace: kube-system

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: external-dns
  namespace: kube-system
data:
  Corefile: |
    .:53 {
      errors
      health
      etcd ${domains.internal} in-addr.arpa ip6.arp {
        fallthrough in-addr.arpa ip6.arpa
      }
      cache 30
      reload
      loadbalance
    }

# ingress needs to be deployed to make external-dns sync work
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns
  namespace: kube-system
  labels:
    k8s-app: external-dns
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      k8s-app: external-dns
  template:
    metadata:
      labels:
        k8s-app: external-dns
    spec:
      serviceAccountName: external-dns
      tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - name: coredns
        image: "${container_images.coredns}"
        imagePullPolicy: Always
        args: [ "-conf", "/etc/coredns/Corefile" ]
        volumeMounts:
        - name: config-volume
          mountPath: /etc/coredns
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        # livenessProbe:
        #   httpGet:
        #     path: /health
        #     port: 8080
        #   initialDelaySeconds: 60
        #   timeoutSeconds: 5
        #   successThreshold: 1
        #   failureThreshold: 5
      - name: etcd
        image: ${container_images.etcd}
        command: [ "/usr/local/bin/etcd" ]
      - name: external-dns
        image: ${container_images.external_dns}
        args:
        - --source=service
        - --provider=coredns
        - --log-level=debug
        - --domain-filter=${domains.internal}
      dnsPolicy: Default
      volumes:
      - name: config-volume
        configMap:
          name: external-dns
          items:
          - key: Corefile
            path: Corefile

# nodePort and clusterIP must be specified for LB services to work with
# the terraform kubernetes-alpha provider. Probably a bug?
# TODO: Remove once not needed by provider

---
kind: Service
apiVersion: v1
metadata:
  name: external-dns-tcp
  namespace: kube-system
  annotations:
    metallb.universe.tf/allow-shared-ip: external-dns
spec:
  type: LoadBalancer
  loadBalancerIP: ${services.internal_dns.vip}
  clusterIP: ${services.kubernetes_external_dns_tcp.vip}
  ports:
  - name: default
    nodePort: ${services.kubernetes_external_dns_tcp.ports.node}
    port: 53
    targetPort: 53
    protocol: TCP
  selector:
    k8s-app: external-dns

---
kind: Service
apiVersion: v1
metadata:
  name: external-dns-udp
  namespace: kube-system
  annotations:
    metallb.universe.tf/allow-shared-ip: external-dns
spec:
  type: LoadBalancer
  loadBalancerIP: ${services.internal_dns.vip}
  clusterIP: ${services.kubernetes_external_dns_udp.vip}
  ports:
  - name: default
    nodePort: ${services.kubernetes_external_dns_udp.ports.node}
    port: 53
    targetPort: 53
    protocol: UDP
  selector:
    k8s-app: external-dns